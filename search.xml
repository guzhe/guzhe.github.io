<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>FineReport报表技巧</title>
    <url>/2024/10/30/FineReport%E6%8A%A5%E8%A1%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h4 id="数据集拼装动态sql条件"><a href="#数据集拼装动态sql条件" class="headerlink" title="数据集拼装动态sql条件"></a>数据集拼装动态sql条件</h4><p>${if(len(控件名称) == 0,””,”and a.bill_code like ‘%”+控件名称+”%’”)}</p>
<h4 id="常见公式"><a href="#常见公式" class="headerlink" title="常见公式"></a>常见公式</h4><div class="table-container">
<table>
<thead>
<tr>
<th>功能描述</th>
<th>功能实现</th>
</tr>
</thead>
<tbody>
<tr>
<td>将日期框组件设置默认值为当前日期</td>
<td>TODATE()</td>
</tr>
<tr>
<td>将日期框组件设置默认值为当前月份最后一天</td>
<td>DATEINMONTH(TODAY(),-1)</td>
</tr>
<tr>
<td>将列汇总</td>
<td>sum(A2)</td>
</tr>
<tr>
<td>四舍五入，保留2位</td>
<td>round(A2, 2)</td>
</tr>
<tr>
<td>字符串截取</td>
<td>left(字符串,位数)，right(字符串,位数)</td>
</tr>
<tr>
<td>…..</td>
<td>…..</td>
</tr>
</tbody>
</table>
</div>
<h4 id="行交替色设置"><a href="#行交替色设置" class="headerlink" title="行交替色设置"></a>行交替色设置</h4><p><img src="https://www.helloimg.com/i/2024/10/30/67219ed7c537f.png" alt=""></p>
<h4 id="按钮清空所有"><a href="#按钮清空所有" class="headerlink" title="按钮清空所有"></a>按钮清空所有</h4><p>在按钮的控件设置中，找到事件，添加一事件，选择JavaScript脚本，脚本内容如下：</p>
<pre class="line-numbers language-none"><code class="language-none">$.each(this.options.form.name_widgets, function(i, item) &#123;
    if(item.options.type !&#x3D;&#x3D; &#39;label&#39;) &#123;
        item.setValue(&quot;&quot;);
        item.setText(&quot;&quot;);
        item.reset();
    &#125;
&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="表格字段过长详情展示方式"><a href="#表格字段过长详情展示方式" class="headerlink" title="表格字段过长详情展示方式"></a>表格字段过长详情展示方式</h4><ol>
<li><h5 id="公共模态框方式"><a href="#公共模态框方式" class="headerlink" title="公共模态框方式"></a>公共模态框方式</h5><p>新建一个公共模态框报表 ibp_show_field_modal.cpt,接着如下图设置表格字段链接到公共模态框报表中</p>
</li>
</ol>
<p><img src="https://www.helloimg.com/i/2024/10/30/6721a239a5c17.png" alt=""></p>
<ol>
<li><h5 id="鼠标浮动展示"><a href="#鼠标浮动展示" class="headerlink" title="鼠标浮动展示"></a>鼠标浮动展示</h5><ol>
<li>双击需要展示的A2格子自定义显示中输入：  if(len($$$)&gt;长度,left($$$,长度)+’…’,$$$)</li>
<li>在单元格其他属性，内容提示设置为：=$$$ 即可实现效果</li>
</ol>
</li>
<li><h5 id="js实现"><a href="#js实现" class="headerlink" title="js实现"></a>js实现</h5><p>点击「模板&gt;模板web&gt;分页预览设置」，添加「加载结束事件」 JS 代码如下：</p>
<pre class="line-numbers language-none"><code class="language-none">$(&quot;td[title^&#x3D;cut]&quot;).each(function()&#123;
&#x2F;&#x2F;获取属性的值
var str &#x3D; $(this).attr(&#39;title&#39;);
&#x2F;&#x2F;定义分隔符号
var length &#x3D; parseInt(str.split(&quot;:&quot;)[1]);
&#x2F;&#x2F;判断长度
if($(this).text().length &gt; length)&#123;
      $(this).attr(&#39;title&#39;,$(this).text());
      $(this).text($(this).text().substring(0,length)+&#39;...&#39;);
      &#125;else&#123;
      $(this).removeAttr(&#39;title&#39;);
      &#125;
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在 A2 单元格其他属性，内容提示输入：cut_+A2+:+5 即可实现效果</p>
</li>
<li><h5 id="html-实现"><a href="#html-实现" class="headerlink" title="html 实现"></a>html 实现</h5><p>在单元格「形态」处给单元格设置公式形态，公式为：</p>
<pre class="line-numbers language-none"><code class="language-none">&quot;&lt;span style&#x3D;&#39;white-space: nowrap;text-overflow:ellipsis; overflow:hidden; display: inline-block;width:100%;&#39;&gt;&quot;+$$$+&quot;&lt;&#x2F;span&gt;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ol>
<p>   当单元格内容超过当前单元格宽度后，显示内容超过的部分会变成省略号(…)，当单元格内容不超过当前单元格宽度时，显示全部内容。</p>
<p>​        在「单元格属性&gt;其他」中，显示内容设置为 「用 HTML 显现内容」，内容提示设置为：=$$$，如下图所示：</p>
<ol>
<li><h5 id="控制行高实现"><a href="#控制行高实现" class="headerlink" title="控制行高实现"></a>控制行高实现</h5><p>方式1 ：方式一：点击「单元格&gt;单元格属性&gt;样式&gt;对齐」，设置文本控制为「单行显示」</p>
<p>方式2：方式二：点击「单元格&gt;单元格属性&gt;其他」，设置为「不自动调整」</p>
</li>
</ol>
<blockquote>
<p>该方式可直接应用于 JS 或 HTML 控制省略显示时，优点是该列内容仍然会换行显示，导出文档时单元格也是内容换行的样式，并且保证了分页预览时可以根据其他单元格自适应行高。若确有需，在使用该方式的基础上也可以再使用方式一控制内容为单行显示。</p>
</blockquote>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>FineReport</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins+Docker 一键自动化部署 SpringBoot 项目(续)</title>
    <url>/2024/01/24/Jenkins+Docker%20%E4%B8%80%E9%94%AE%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%20SpringBoot%20%E9%A1%B9%E7%9B%AE(%E7%BB%AD)/</url>
    <content><![CDATA[<h4 id="发布项目支持选择git-分支"><a href="#发布项目支持选择git-分支" class="headerlink" title="发布项目支持选择git 分支"></a>发布项目支持选择git 分支</h4><ul>
<li><p>安装插件Git Parameter</p>
</li>
<li><p>项目构建配置中配置 如下图配置参数</p>
<p><img src="https://img-blog.csdnimg.cn/3c94a62820bc48daa0c8fd509cb0d76a.png" alt="img"></p>
</li>
</ul>
<ul>
<li><p>在branches to build 中引用 branch 参数 这样就完成配置了</p>
<p><img src="https://img-blog.csdnimg.cn/b1b9c47c205a43209c89f373ad5d06a9.png" alt="img"></p>
</li>
</ul>
<h4 id="支持服务项目远程部署"><a href="#支持服务项目远程部署" class="headerlink" title="支持服务项目远程部署"></a>支持服务项目远程部署</h4><ol>
<li><p>安装插件 Publish over SSH</p>
</li>
<li><p>系统配置中配置Publish over SSH</p>
<ul>
<li><p>下图圈起来的位置是 远程服务器登录密码或者是ssh 的key(取决于服务器认证方式)</p>
<p><img src="https://img-blog.csdnimg.cn/811f0134211f4ab7984d8c69ec5ad069.png" alt="img"></p>
</li>
<li><p>接着添加ssh servers 信息 </p>
<p><img src="https://img-blog.csdnimg.cn/98a89bdf49e7414b846ebee382c2b551.png" alt="img"></p>
</li>
</ul>
</li>
<li><p>项目构建中添加构建步骤 send files or execute commands over ssh</p>
<p><img src="https://img-blog.csdnimg.cn/d27624a09cfb42e7a5f43849be9cddc5.png" alt="img"></p>
</li>
<li><p>步骤如下配置 选择ssh server 后配置 transfers</p>
<p>其中 sources files 位置为工作空间的相对位置</p>
<p>remove prefix 是去除前缀后的 文件会全部传入远程服务器</p>
<p>remote directory  是与 上面系统配置ssh servers中的remote directory 结合的位置，此位置就是远程服务器存放传输文件的位置<br><img src="https://img-blog.csdnimg.cn/0387490e558c4634af8242d619aa9d76.png" alt="img"></p>
</li>
<li><p>最后一步 配置 exec command,如下图</p>
<p><img src="https://img-blog.csdnimg.cn/d7ef0ac5ff194027a2dc12172aaa1324.png" alt="img"></p>
<p> 到此，简单的远程部署就结束了!</p>
</li>
</ol>
<p>​    </p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>apifox接口测试工具使用分享</title>
    <url>/2023/10/21/apifox%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h4 id="apifox介绍"><a href="#apifox介绍" class="headerlink" title="apifox介绍"></a>apifox介绍</h4><blockquote>
<p>今天分享一下apifox工具使用<br>apifox是阿里开发的一款集API 文档、API 调试、API Mock、API 自动化测试于一体的协助工具<br>Apifox = Postman + Swagger + Mock + JMeter</p>
<p>基础的使用就不用多介绍了，下面介绍一些常用的高级特性</p>
</blockquote>
<h4 id="apifox-环境维护"><a href="#apifox-环境维护" class="headerlink" title="apifox-环境维护"></a>apifox-环境维护</h4><blockquote>
<p>使用场景：为了方便一个项目服务在多个环境发布后中进行接口测试，比如本地开发环境、mit、sit、prod等等</p>
<p>使用介绍：新建一个演示项目001后，点击右上角可以进入管理环境页面可以维护本地开发，测试，生产等环境</p>
<p>通过gayway路由的微服务添加测试环境时带上服务名，本地测试不加</p>
</blockquote>
<h4 id="apifox-接口维护"><a href="#apifox-接口维护" class="headerlink" title="apifox-接口维护"></a>apifox-接口维护</h4><blockquote>
<p>在项目接口管理中维护一个接口有三种方式</p>
<ul>
<li><p>手动添加</p>
<p>在接口管理中新建接口手动维护，如果只是想简单测一下项目接口地址可以建一个快捷请求</p>
</li>
<li><p>手动导入添加</p>
<p>点击项目设置，在数据管理中有个导入数据, 导入分手动导入和定时导入，手动导入都是导入各种类型的数据文件 支持的还挺全面</p>
</li>
<li><p>定时同步添加或更新</p>
<p>在项目设置-&gt;数据管理中的定时导入可以根据设置的url 和频次进行定时更新接口文档，维护好后可以手动触发更新</p>
</li>
</ul>
</blockquote>
<h4 id=""><a href="#" class="headerlink" title=" "></a> </h4><h4 id="apifox-压测"><a href="#apifox-压测" class="headerlink" title="apifox-压测"></a>apifox-压测</h4><blockquote>
<p>在项目自动化测试中添加测试场景 - 测试场景001， 添加步骤 可以接口导入，测试用例导入也可以自定义</p>
<p>接口导入选择需要测试的接口，最右边有设置运行配置 如：循环次数，线程数。</p>
</blockquote>
<p>​    </p>
<h4 id="apifox-脚本使用"><a href="#apifox-脚本使用" class="headerlink" title="apifox-脚本使用"></a>apifox-脚本使用</h4><blockquote>
<p>接口中前置操作或后置操作可以添加脚本。例如以下接口脚本，此接口请求前需要获取上个接口中的响应token，然后放置在请求头上再去请求</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 获取环境里的 前置 URL</span>
<span class="token keyword">const</span> baseUrl <span class="token operator">=</span> pm<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">getBaseUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> loginRequest <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> baseUrl <span class="token operator">+</span> <span class="token string">"/ehr-service/foreignApi/token/getToken"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>
   <span class="token literal-property property">header</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token string-property property">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span> <span class="token comment">// 注意：header 需要加上 Content-Type</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'raw'</span><span class="token punctuation">,</span><span class="token comment">// 此处为 raw</span>
    <span class="token literal-property property">raw</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">appId</span><span class="token operator">:</span> <span class="token string">'wlxz0001'</span><span class="token punctuation">,</span> <span class="token literal-property property">appSecret</span><span class="token operator">:</span><span class="token string">'135873E92784809A0B68B5511456CB85'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 序列化后的 json 字符串</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
pm<span class="token punctuation">.</span><span class="token function">sendRequest</span><span class="token punctuation">(</span>loginRequest<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取 Header 参数对象</span>
  <span class="token keyword">var</span> headers <span class="token operator">=</span> pm<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">;</span>
  <span class="token comment">// 修改 header 参数（如不存在则新增）</span>
  headers<span class="token punctuation">.</span><span class="token function">upsert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">"token"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>body<span class="token punctuation">.</span>token<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以参考：<a href="https://apifox.com/help/best-practices/how-to-handle-auth">登录态（Auth）如何处理 | Apifox 帮助文档</a></p>
<p>提示：最后饭有代码片段提示，点高级功能可以调转到帮助文档</p>
<ol>
<li><p>环境变量</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">*</span><span class="token comment">// 设置环境变量*</span>
pm<span class="token punctuation">.</span>environment<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'variable_key'</span><span class="token punctuation">,</span> <span class="token string">'variable_value'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
<span class="token operator">*</span><span class="token comment">// 获取环境变量*</span>
<span class="token keyword">var</span> variable_key <span class="token operator">=</span> pm<span class="token punctuation">.</span>environment<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'variable_key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
<span class="token operator">*</span><span class="token comment">// unset 环境变量*</span>
pm<span class="token punctuation">.</span>environment<span class="token punctuation">.</span><span class="token function">unset</span><span class="token punctuation">(</span><span class="token string">'variable_key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>读取的时候，需要使用<code>JSON.parse</code>转换回来</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
pm<span class="token punctuation">.</span>environment<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'array'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token string">'val'</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
pm<span class="token punctuation">.</span>environment<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'obj'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>pm<span class="token punctuation">.</span>environment<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'array'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>pm<span class="token punctuation">.</span>environment<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'obj'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 处理异常</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<ol>
<li><p>全局变量</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 设置全局变量</span>
pm<span class="token punctuation">.</span>globals<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'variable_key'</span><span class="token punctuation">,</span> <span class="token string">'variable_value'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
<span class="token comment">// 获取全局变量</span>
<span class="token keyword">var</span> variable_key <span class="token operator">=</span> pm<span class="token punctuation">.</span>globals<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'variable_key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
<span class="token comment">// unset 全局变量</span>
pm<span class="token punctuation">.</span>globals<span class="token punctuation">.</span><span class="token function">unset</span><span class="token punctuation">(</span><span class="token string">'variable_key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<ol>
<li><p>临时变量</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 设置临时变量</span>
pm<span class="token punctuation">.</span>variables<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'variable_key'</span><span class="token punctuation">,</span> <span class="token string">'variable_value'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
<span class="token comment">// 获取临时变量</span>
<span class="token keyword">var</span> variable_key <span class="token operator">=</span> pm<span class="token punctuation">.</span>variables<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'variable_key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
<span class="token comment">// unset 临时变量</span>
pm<span class="token punctuation">.</span>variables<span class="token punctuation">.</span><span class="token function">unset</span><span class="token punctuation">(</span><span class="token string">'variable_key'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<ol>
<li><p>URL 相关信息</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 获取 url 对象</span>
<span class="token keyword">var</span> urlObj <span class="token operator">=</span> pm<span class="token punctuation">.</span>request<span class="token punctuation">.</span>url<span class="token punctuation">;</span>
      
<span class="token comment">// 获取完整接口请求 URL，包含 query 参数</span>
<span class="token keyword">var</span> url <span class="token operator">=</span> urlObj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
<span class="token comment">// 获取协议（http 或 https）</span>
<span class="token keyword">var</span> protocol <span class="token operator">=</span> urlObj<span class="token punctuation">.</span>protocol<span class="token punctuation">;</span>
      
<span class="token comment">// 获取 端口</span>
<span class="token keyword">var</span> port <span class="token operator">=</span> urlObj<span class="token punctuation">.</span>port<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<ol>
<li><p>Header 参数</p>
<p>获取header参数</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 获取 Header 参数对象</span>
<span class="token keyword">var</span> headers <span class="token operator">=</span> pm<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">;</span>
      
<span class="token comment">// 获取 key 为 field1 的 header 参数的值</span>
<span class="token keyword">var</span> field1 <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"field1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
<span class="token comment">// 已键值对象方式获取所有 header 参数</span>
<span class="token keyword">var</span> headersObject <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">toObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
<span class="token comment">// 遍历整个 header</span>
headers<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出参数名</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出参数值</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>修改 header 参数</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 获取 Header 参数对象</span>
<span class="token keyword">var</span> headers <span class="token operator">=</span> pm<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">;</span>
      
<span class="token comment">// 增加 header 参数</span>
headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">"field1"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"value1"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
<span class="token comment">// 修改 header 参数（如不存在则新增）</span>
headers<span class="token punctuation">.</span><span class="token function">upsert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">"field2"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"value2"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>更多使用示例：</p>
<p><a href="https://apifox.com/help/pre-post-processors-and-scripts/scripts/examples/variables">脚本使用变量 | Apifox 帮助文档</a></p>
<p><a href="https://apifox.com/help/pre-post-processors-and-scripts/scripts/api-references/pm-reference">pm 对象 API | Apifox 帮助文档</a></p>
</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins+Docker 一键自动化部署 SpringBoot 项目</title>
    <url>/2024/01/24/Jenkins+Docker%20%E4%B8%80%E9%94%AE%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%20SpringBoot%20%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>本文章实现最简单全面的<code>Jenkins+docker+springboot</code> 一键自动部署项目，步骤齐全，少走坑路。</p>
<blockquote>
<p>环境：centos7+git(gitee)</p>
</blockquote>
<p>简述实现步骤：在docker安装jenkins，配置jenkins基本信息，利用Dockerfile和shell脚本实现项目自动拉取打包并运行。</p>
<h3 id="一、centos安装docker"><a href="#一、centos安装docker" class="headerlink" title="一、centos安装docker"></a>一、centos安装docker</h3><p>docker安装社区版本CE</p>
<p>1.确保 yum 包更新到最新。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">yum <span class="token keyword">update</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>2.卸载旧版本(如果安装过旧版本的话)</p>
<pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">yum <span class="token keyword">remove</span> docker  docker<span class="token operator">-</span>common docker<span class="token operator">-</span>selinux docker<span class="token operator">-</span>engine<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>3.安装需要的软件包</p>
<pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell"><span class="token hvariable">yum</span> <span class="token hvariable">install</span> <span class="token operator">-</span><span class="token hvariable">y</span> <span class="token hvariable">yum</span><span class="token operator">-</span><span class="token hvariable">utils</span> <span class="token hvariable">device</span><span class="token operator">-</span><span class="token hvariable">mapper</span><span class="token operator">-</span><span class="token hvariable">persistent</span><span class="token operator">-</span><span class="token keyword">data</span> <span class="token hvariable">lvm2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>4.设置yum源</p>
<pre class="line-numbers language-none"><code class="language-none">yum-config-manager --add-repo https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>5.安装docker</p>
<pre class="line-numbers language-none"><code class="language-none">yum install docker-ce  #由于repo中默认只开启stable仓库，故这里安装的是最新稳定版17.12.0
yum install &lt;自己的版本&gt;  # 例如：sudo yum install docker-ce-17.12.0.ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>6.启动和开机启动</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">systemctl <span class="token keyword">start</span> docker
systemctl <span class="token keyword">enable</span> docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>7.验证安装是否成功</p>
<pre class="line-numbers language-undefined" data-language="undefined"><code class="language-undefined">docker version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="二、安装Jenkins"><a href="#二、安装Jenkins" class="headerlink" title="二、安装Jenkins"></a>二、安装Jenkins</h3><p>Jenkins中文官网：</p>
<blockquote>
<p><a href="https://www.jenkins.io/zh/">https://www.jenkins.io/zh/</a></p>
</blockquote>
<p>1.安装Jenkins</p>
<p>docker 安装一切都是那么简单，注意检查8080是否已经占用！如果占用修改端口</p>
<pre class="line-numbers language-none"><code class="language-none">docker run --name jenkins -u root --rm -d -p 8080:8080 -p 50000:50000 -v &#x2F;var&#x2F;jenkins_home:&#x2F;var&#x2F;jenkins_home -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock jenkinsci&#x2F;blueocean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果没改端口号的话</p>
<p>安装完成后访问地址-&gt; <a href="http://{部署Jenkins所在服务IP}:8080">http://{部署Jenkins所在服务IP}:8080</a></p>
<p>此处会有几分钟的等待时间。</p>
<p>2.初始化Jenkins</p>
<p>2.1 解锁Jenkins</p>
<ul>
<li>进入Jenkins容器：<code>docker exec -it &#123;Jenkins容器名&#125; bash</code></li>
<li><p>查看密码：cat /var/lib/jenkins/secrets/initialAdminPassword</p>
</li>
<li><p>复制密码到输入框里面</p>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/img_convert/131a6b7ac0b634ba08345ef67b1ee8b6.png" alt="img"></p>
<p>2.2 安装插件</p>
<p>选择第一个：安装推荐的插件</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/f13236d4512bd691d3a19a9a8158cdae.png" alt="img"></p>
<p>2.3 创建管理员用户</p>
<p>此账户一定要记住哦</p>
<h3 id="三、系统配置"><a href="#三、系统配置" class="headerlink" title="三、系统配置"></a>三、系统配置</h3><ol>
<li>安装需要插件</li>
</ol>
<p>进入【首页】–【系统管理】–【插件管理】–【可选插件】</p>
<p>搜索以下需要安装的插件，点击安装即可。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/04a01a5b784fd095a583d91b4efecac3.png" alt="img"></p>
<ul>
<li>安装<code>Maven Integration</code></li>
<li>安装<code>Publish Over SSH</code>(如果不需要远程推送，不用安装)</li>
<li>如果使用Gitee 码云，安装插件Gitee（Git自带不用安装）</li>
</ul>
<ol>
<li>配置Maven</li>
</ol>
<p>进入【首页】–【系统管理】–【全局配置】，拉到最下面maven–maven安装</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/990f3cbd91ed1b7cfbc44aafaedb9dac.png" alt="img"></p>
<h3 id="四、创建任务"><a href="#四、创建任务" class="headerlink" title="四、创建任务"></a>四、创建任务</h3><ol>
<li>新建任务</li>
</ol>
<p>点击【新建任务】，输入任务名称，点击构建一个自由风格的软件项目</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/ef1c2923c6408ebd6e8a120674771636.png" alt="img"></p>
<ol>
<li>源码管理</li>
</ol>
<p>点击【源码管理】–【Git】，输入仓库地址，添加凭证，选择好凭证即可。</p>
<p><img src="D:\share\设计原则与思想：面向对象 (11讲" alt="img">\e17b50fa089f614e3bf2d3370c7659a0.png)</p>
<p><img src="D:\share\设计原则与思想：面向对象 (11讲" alt="img">\8c4305785893ebb604aae3bd5bc1f53c.png)</p>
<p>3.构建触发器</p>
<p>点击【构建触发器】–【构建】–【增加构建步骤】–【调用顶层Maven目标】–【填写配置】–【保存】</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/25ba4ae009b24e6b71f13d85257e0b13.png" alt="img"></p>
<p>此处命令只是install，看是否能生成jar包</p>
<pre class="line-numbers language-cobol" data-language="cobol"><code class="language-cobol">clean install -Dmaven<span class="token punctuation">.</span><span class="token keyword">test</span><span class="token punctuation">.</span>skip<span class="token operator">=</span><span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/img_convert/2970e5c6d5f74f0cbb78d3f88602c45c.png" alt="img"></p>
<ol>
<li>保存</li>
</ol>
<p>点击【保存】按钮即可</p>
<h3 id="五、测试"><a href="#五、测试" class="headerlink" title="五、测试"></a>五、测试</h3><p>该功能测试是否能正常打包</p>
<ol>
<li>构建</li>
</ol>
<p>点击构建按钮</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/9cb95bdd59ec6d3ce8277aeb1371387f.png" alt="img"></p>
<p>2.查看日志</p>
<p>点击正在构建的任务，或者点击任务名称，进入详情页面，查看控制台输出，看是否能成功打成jar包。</p>
<p>该处日志第一次可能下载依赖jar包失败，再次点击构建即可成功。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/669aa958dad11071d157b8f285c2db7f.png" alt="img"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/9179000532bc381dd09b5cee9ba13d9c.png" alt="img"></p>
<ol>
<li>查看项目位置</li>
</ol>
<p>cd /var/jenkins_home/workspace</p>
<p>ll 即可查看是否存在</p>
<h3 id="六、运行项目"><a href="#六、运行项目" class="headerlink" title="六、运行项目"></a>六、运行项目</h3><p>因为我们项目和jenkins在同一台服务器，所以我们用shell脚本运行项目，原理既是通过dockerfile 打包镜像，然后docker运行即可。</p>
<ol>
<li>Dockerfile</li>
</ol>
<p>在springboot项目根目录新建一个名为Dockerfile的文件，注意没有后缀名，其内容如下:（大致就是使用jdk8，把jar包添加到docker然后运行prd配置文件。详细可以查看其他教程）</p>
<pre class="line-numbers language-none"><code class="language-none">FROM jdk:8
VOLUME &#x2F;tmp
ADD target&#x2F;zx-order-0.0.1-SNAPSHOT.jar app.jar
EXPOSE 8888
ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd&#x3D;file:&#x2F;dev&#x2F;.&#x2F;urandom&quot;,&quot;-jar&quot;,&quot;&#x2F;app.jar&quot;,&quot;--spring.profiles.active&#x3D;prd&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li>修改jenkins任务配置</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/img_convert/103cc44db42fdd469a9dcba55ce6a35f.png" alt="img"></p>
<p>配置如下：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/06dd562a7ef8703d495d63a441fa180e.png" alt="img"></p>
<ul>
<li>-t：指定新镜像名</li>
<li>.：表示Dockfile在当前路径</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">cd &#x2F;var&#x2F;jenkins_home&#x2F;workspace&#x2F;zx-order-api
docker stop zx-order || true
docker rm zx-order || true
docker rmi zx-order || true
docker build -t zx-order .
docker run -d -p 8888:8888 --name zx-order zx-order:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>备注：</p>
<ol>
<li><p>我上图用了docker logs -f 是为了方便看日志，真实不要用，因为会一直等待日志，构建任务会失败</p>
</li>
<li><p>加|| true 是如果命令执行失败也会继续实行，为了防止第一次没有该镜像报错</p>
</li>
<li><p>保存</p>
</li>
</ol>
<p>点击保存即可</p>
<ol>
<li>构建</li>
</ol>
<p>查看jenkins控制台输出，输出如下，证明成功！</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/b92fafa20728b0c627622dd9b4c266f1.png" alt="img"></p>
<ol>
<li><p>验证</p>
</li>
<li><p>docker ps 查看是否有自己的容器</p>
</li>
<li><p>docker logs 自己的容器名 查看日志是否正确</p>
</li>
<li><p>浏览器访问项目试一试</p>
</li>
</ol>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker常用镜像运行</title>
    <url>/2024/02/28/docker-runs/</url>
    <content><![CDATA[<h4 id="ELK-简单搭建"><a href="#ELK-简单搭建" class="headerlink" title="ELK 简单搭建"></a>ELK 简单搭建</h4><p>docker pull docker.elastic.co/elasticsearch/elasticsearch:7.15.1 </p>
<p>docker pull docker.elastic.co/logstash/logstash:7.15.1 </p>
<p>docker pull docker.elastic.co/kibana/kibana:7.15.1</p>
<p>（也有docker主将 elk 打包成一个镜像 elk,这种方式也简单）</p>
<p>docker run -d —name elasticsearch -p 9200:9200 -p 9300:9300  -e “discovery.type=single-node”  -m 2g   docker.elastic.co/elasticsearch/elasticsearch:7.15.1</p>
<p>该命令会在后台启动一个名为elasticsearch的容器，并将主机的9200端口映射到容器的9200端口，同时将主机的9300端口映射到容器的9300端口。</p>
<p>docker run -d —name logstash —link elasticsearch:elasticsearch -p 5044:5044 -m 1g -v /path/to/logstash.conf:/usr/share/logstash/pipeline/logstash.conf docker.elastic.co/logstash/logstash:7.15.1</p>
<p>请将/path/to/logstash.conf替换为你本地存储Logstash配置文件的路径。</p>
<p>docker run -d —name kibana —link elasticsearch:elasticsearch -p 5601:5601 -m 1g docker.elastic.co/kibana/kibana:7.15.1</p>
<p>Elasticsearch配置：你可以通过访问<a href="http://localhost:9200来验证Elasticsearch是否成功运行。">http://localhost:9200来验证Elasticsearch是否成功运行。</a></p>
<p>Logstash配置：你可以通过编辑Logstash配置文件/path/to/logstash.conf来定义你的日志处理逻辑。</p>
<p>Kibana配置：你可以通过访问<a href="http://localhost:5601来打开Kibana的Web界面，并通过它进行数据可视化和管理。">http://localhost:5601来打开Kibana的Web界面，并通过它进行数据可视化和管理。</a></p>
<p>ps:  es 可以安装中文分词器插件可以支持中文分词</p>
<p>​       logstash 可以配置beat 和kafka等等多种input方式 </p>
<p>​        虚拟机内存不够的一定需要带个 -m 参数限制下 容器启动后可以用docker stats 容器 查看 不够可以用 docker update -m 改下（只能改大）</p>
<p>​      </p>
<blockquote>
<p>例如： docker update -m 1G —memory-swap=1G  mysql</p>
</blockquote>
<h4 id="filebeat-安装运行"><a href="#filebeat-安装运行" class="headerlink" title="filebeat 安装运行"></a>filebeat 安装运行</h4><pre class="line-numbers language-none"><code class="language-none">docker pull docker.elastic.co&#x2F;beats&#x2F;filebeat:7.15.1

mkdir filebeat 

cd filebeat 

nano filebeat.yml

docker run -d --name&#x3D;filebeat --user&#x3D;root --v&#x3D;&quot;$(pwd)&#x2F;filebeat.yml:&#x2F;usr&#x2F;share&#x2F;filebeat&#x2F;filebeat.yml:ro&quot; --v&#x3D;&quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers:&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers:ro&quot; --v&#x3D;&quot;&#x2F;var&#x2F;log:&#x2F;var&#x2F;log:ro&quot; --v&#x3D;&quot;&#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock:ro&quot; docker.elastic.co&#x2F;beats&#x2F;filebeat:7.15.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h4><pre class="line-numbers language-text" data-language="text"><code class="language-text">docker run -d --name zookeeper -p 2181:2181 -m 300M -v /etc/localtime:/etc/localtime --restart=always wurstmeister/zookeeper:3.4.13<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="zk-ui"><a href="#zk-ui" class="headerlink" title="zk ui"></a>zk ui</h4><pre class="line-numbers language-none"><code class="language-none">docker run -d --name zkui -p 9090:9090 -e ZKUI_ZK_SERVER&#x3D;192.168.136.130:2181 -m 500M qnib&#x2F;zkui
注意这个地方有点坑，容器启动却访问不了，进容器执行 curl http:&#x2F;&#x2F;127.0.0.1:9090 发现没有启动服务
手动启动就可以了或者重新拉去源码方式编译打包成可执行镜像也成
简单点手动启动下：
进入容器 docker exec -it zkui bash
cd &#x2F;opt&#x2F;zkui&#x2F;target&#x2F;  发现这里没有config.cfg启动会报错
将 &#x2F;opt&#x2F;zkui 目录下的这个文件拷贝到 &#x2F;opt&#x2F;zkui&#x2F;target&#x2F; 下
手动配置下文件中的 zkserver （这个地方如果用不了VI命令的话，需要将文件拷贝到宿主机改完后，在拷贝回来 docker cp xxx:xx &#x2F;xxx  docker &#x2F;xxxx xxx:xx）
最后只需要启动下jar就可以了 
nohup java -jar zkui-2.0-SNAPSHOT-jar-with-dependencies.jar &gt;out.log 2&gt;&amp;1 &amp;

记：第一次发现启动成功，然后删除容器，又run了一把同样的操作发现启动失败，看来日志和源码发现配置文件（config.cfg）中需要配置这个属性 X-Forwarded-For&#x3D;xxx
配置完后启动就成功了，不知道为啥一次成功一次还需要加配置。。。
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h4><p>为方便测试，起的zookeeper 容器都在一起 ，直接用—link 方式，如果容器不在KAFKA_ZOOKEEPER_CONNECT需要设置</p>
<p>docker run -d —name kafka -p 9092:9092 -m 512M —link zookeeper:zookeeper —restart=always —env KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 —env KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092 —env KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 —env KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 wurstmeister/kafka:2.8.1</p>
<p>查询topic列表</p>
<p>/opt/kafka/bin/kafka-topics.sh —zookeeper zookeeper:2181 —list</p>
<p>发送消息</p>
<p>/opt/kafka/bin/kafka-console-producer.sh —broker-list localhost:9092 —topic myTopic （）</p>
<p>消费消息</p>
<p>/opt/kafka/bin/kafka-console-consumer.sh —bootstrap-server localhost:9092 —topic myTopic —from-beginning</p>
<h4 id="kafka-manager-cmak-3-0-0-6"><a href="#kafka-manager-cmak-3-0-0-6" class="headerlink" title="kafka-manager (cmak 3.0.0.6)"></a>kafka-manager (cmak 3.0.0.6)</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://github.com/yahoo/cmak/releases 下载最新zip 需要自己打包生成镜像文件

<span class="token comment">#Dockerfile</span>
FROM adoptopenjdk:11-jdk-hotspot-bionic
ADD cmak-3.0.0.6/ /opt/km3006/
CMD <span class="token punctuation">[</span><span class="token string">"/opt/km3006/bin/cmak"</span>,<span class="token string">"-Dconfig.file=/opt/km3006/conf/application.conf"</span><span class="token punctuation">]</span>

<span class="token function">docker</span> build <span class="token parameter variable">-t</span> km:3006 <span class="token builtin class-name">.</span>

<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> km <span class="token parameter variable">--link</span> zookeeper:kafka-manager-zookeeper <span class="token parameter variable">-e</span> <span class="token assign-left variable">ZK_HOSTS</span><span class="token operator">=</span>kafka-manager-zookeeper:2181 <span class="token parameter variable">-m</span> 300M <span class="token parameter variable">-p</span> <span class="token number">9104</span>:9000 km:3006<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>cmak第一次启动添加会报错：</strong></p>
<p><strong>KeeperErrorCode = Unimplemented for /kafka-manager/mutex Try again.</strong></p>
<p>解决：</p>
<pre class="line-numbers language-none"><code class="language-none">docker exec -it zookeeper bash 

root@zookeeper:&#x2F;opt&#x2F;zookeeper-3.4.13&#x2F;bin#.&#x2F;zkCli.sh 

[zk: localhost:2181(CONNECTED) 0] ls &#x2F;kafka-manager

[configs, clusters, deleteClusters]

[zk: localhost:2181(CONNECTED) 1] create &#x2F;kafka-manager&#x2F;mutex &quot;&quot;

Created &#x2F;kafka-manager&#x2F;mutex

[zk: localhost:2181(CONNECTED) 2] create &#x2F;kafka-manager&#x2F;mutex&#x2F;locks &quot;&quot;

Created &#x2F;kafka-manager&#x2F;mutex&#x2F;locks

[zk: localhost:2181(CONNECTED) 3] create &#x2F;kafka-manager&#x2F;mutex&#x2F;leases &quot;&quot;

Created &#x2F;kafka-manager&#x2F;mutex&#x2F;leases<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>完美解决。（可以使用zk ui界面上添加比较方便）</p>
<h4 id="jenkins"><a href="#jenkins" class="headerlink" title="jenkins"></a>jenkins</h4><p>docker run -d —name jenkins -u root -p 14639:8080 -p 50000:50000 —privileged=true  -v /var/jenkins_home:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock jenkinsci/blueocean</p>
<p>ps： 如果知道 tag 可以给 image 打上 docker tag image:latest image:version</p>
<h4 id="xwiki"><a href="#xwiki" class="headerlink" title="xwiki"></a>xwiki</h4><p>docker run -d —name xwiki -p 8051:8080 -v D:\share\home\xwiki:/usr/local/xwiki -e DB_USER=root -e DB_PASSWORD=123456 -e DB_DATABASE=xwiki -e DB_HOST=10.92.32.33 xwiki:mysql-tomcat  （这里的运行环境是docker for window 也可以运行起来）</p>
<h4 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h4><p>1.首先创建数据卷 D:\share\home\redis 下载 <a href="http://download.redis.io/redis-stable/redis.conf">http://download.redis.io/redis-stable/redis.conf</a> 放在目录下<br>2.更改 redis.conf 将 bind 127.0.0.1 注释掉 ，设置appendonly yes开启持久化配置等等<br>3.docker run -d —name redis -p 6377:6379 -v D:\share\home\redis\redis.conf:/etc/redis/redis.conf -v D:\share\home\redis\data:/data  redis:7.2.3</p>
<h4 id="hertzbeat-监控"><a href="#hertzbeat-监控" class="headerlink" title="hertzbeat 监控"></a>hertzbeat 监控</h4><p>docker run -d -p 1157:1157 -p 1158:1158 -e LANG=zh_CN.UTF-8 -e TZ=Asia/Shanghai -v D:\share\home\hertzbeat\data:/opt/hertzbeat/data -v D:\share\home\hertzbeat\logs:/opt/hertzbeat/logs -v D:\share\home\hertzbeat\application.yml:/opt/hertzbeat/config/application.yml -v D:\share\home\hertzbeat\sureness.yml:/opt/hertzbeat/config/sureness.yml —restart=always —name hertzbeat tancloud/hertzbeat:v1.4.3<br>浏览器访问<a href="http://localhost:1157">http://localhost:1157</a> 默认账号密码 admin/hertzbeat<br>部署采集器集群<br>docker run -d -e IDENTITY=custom-collector-name -e MANAGER_HOST=10.92.32.33 -e MANAGER_PORT=1158 —name hertzbeat-collector tancloud/hertzbeat-collector:v1.4.3<br>-e IDENTITY=custom-collector-name : 配置此采集器的唯一性标识符名称，多个采集器名称不能相同，建议自定义英文名称。<br>-e MODE=public : 配置运行模式(public or private), 公共集群模式或私有云边模式。<br>-e MANAGER_HOST=127.0.0.1 : 配置连接主HertaBeat服务的对外IP。<br>-e MANAGER_PORT=1158 : 配置连接主HertzBeat服务的对外端口，默认1158</p>
<h4 id="postgres-sql"><a href="#postgres-sql" class="headerlink" title="postgres sql"></a>postgres sql</h4><blockquote>
<p>docker run —name pgsql —privileged -e POSTGRES_PASSWORD=123456 -p 5432:5432 -v D:\docker_mapping\pgsql\data:/var/lib/postgresql/data -d postgres:14.11</p>
</blockquote>
<h4 id="mysql8"><a href="#mysql8" class="headerlink" title="mysql8"></a>mysql8</h4><blockquote>
<ul>
<li>先随便启动一个mysql8 ,然后复制出配置文件<blockquote>
<ul>
<li>docker run -p 3306:3306 —name mysql8 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:8.3.0</li>
<li>docker cp  mysql8:/etc/mysql D:\docker_mapping\mysql</li>
</ul>
</blockquote>
</li>
<li>docker rm -f mysql8</li>
<li>docker run  -p 3306:3306  —name mysql8  —privileged=true -v D:\docker_mapping\mysql:/etc/mysql  -v D:\docker_mapping\mysql\data:/var/lib/mysql  -v /etc/localtime:/etc/localtime  -e MYSQL_ROOT_PASSWORD=123456  -d mysql:8.3.0</li>
</ul>
</blockquote>
<h4 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h4><pre class="line-numbers language-none"><code class="language-none">docker run --name mongodb -v D:\docker_mapping\mongo\mongodb:&#x2F;data&#x2F;db -p 27017:27017 -d mongo:6.0.13 --auth
docker exec -it mongodb mongosh admin (mongo 5.0以下 使用mongo 命令)
db.createUser(&#123; user:&#39;root&#39;,pwd:&#39;123456&#39;,roles:[ &#123; role:&#39;userAdminAnyDatabase&#39;, db: &#39;admin&#39;&#125;,&quot;readWriteAnyDatabase&quot;]&gt; &#125;);
db.auth(&#39;root&#39;, &#39;123456&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="NIFI"><a href="#NIFI" class="headerlink" title="NIFI"></a>NIFI</h4><p>docker run —privileged=true —name nifi -p 8443:8443 -p 9999:9999 -e NIFI_WEB_HTTP_PORT=8443 -d apache/nifi:1.24.0</p>
<h4 id="nacos"><a href="#nacos" class="headerlink" title="nacos"></a>nacos</h4><ol>
<li>安装容器<br>docker run —name nacos -d -p 8848:8848 -e MODE=standalone  nacos/nacos-server:v2.3.1</li>
<li>创建挂载需要的目录<br>mkdir -p /mydata/nacos/logs/                      #新建logs目录<br>mkdir -p /mydata/nacos/conf/            #新建conf目录<br>mkdir -p /mydata/nacos/data/            #新建data目录</li>
<li>复制文件到挂载目录<br>docker cp nacos:/home/nacos/logs/ D:\docker_mapping\nacos<br>docker cp nacos:/home/nacos/conf/ D:\docker_mapping\nacos<br>docker cp nacos:/home/nacos/data/ D:\docker_mapping\nacos</li>
<li>删除容器<br>docker rm -f nacos</li>
<li>进入挂载目录找到application.properties完成配置</li>
<li>重新安装（完成配置文件挂载）<br>docker run -d —name nacos \<br>-p 8848:8848 \<br>-p 9848:9848 \<br>-p 9849:9849 \<br>—env MODE=standalone \<br>—env NACOS_AUTH_ENABLE=true \<br>-v D:\docker_mapping\nacos\conf:/home/nacos/conf \<br>-v D:\docker_mapping\nacos\logs:/home/nacos/logs \<br>-v D:\docker_mapping\nacos\data:/home/nacos/data \<br>nacos/nacos-server:v2.3.1<blockquote>
<p>注意如果使用数据库方式需要先执行脚本，然后在启动容器不然会报错</p>
</blockquote>
</li>
</ol>
<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>
<h4 id="Apollo-多环境分布式部署（dev-pro）"><a href="#Apollo-多环境分布式部署（dev-pro）" class="headerlink" title="Apollo 多环境分布式部署（dev,pro）"></a>Apollo 多环境分布式部署（dev,pro）</h4><ol>
<li><p>新建数据库（多个环境需要建立多个config库）执行sql 文件 文件参考：<br>config库： <a href="https://github.com/apolloconfig/apollo/blob/master/scripts/sql/src/apolloconfigdb.sql">https://github.com/apolloconfig/apollo/blob/master/scripts/sql/src/apolloconfigdb.sql</a><br>portal库： <a href="https://github.com/apolloconfig/apollo/blob/master/scripts/sql/src/apolloportaldb.sql">https://github.com/apolloconfig/apollo/blob/master/scripts/sql/src/apolloportaldb.sql</a><br>建立完成后应该有两个config库 和一个 protal库 例如：apollo_config_dev，apollo_config_pro，apollo_portal_db</p>
</li>
<li><p>建立本地映射目录 例如D盘下新建Apollo文件夹，随便起一个apollo-configservice容器和apollo-adminservice容器<br>将这两个服务的配置文件拷贝一份到对应的目录中  </p>
<blockquote>
<p>docker cp apollo-configservice:/apollo-configservice/config D:\docker_mapping\apollo\config-service-dev<br>docker cp apollo-adminservice容器:/apollo-adminservice/config D:\docker_mapping\apollo\admin-service-dev </p>
</blockquote>
</li>
<li>将配置也复制一份到对应的pro文件夹里  </li>
</ol>
<p>完成后的目录结构：<br><pre class="line-numbers language-none"><code class="language-none">├─admin-service-dev
│  └─config
├─admin-service-pro
│  └─config
├─config-service-dev
│  └─config
├─config-service-pro
│  └─config
└─protal
    └─config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<ol>
<li><p>修改本地config-service-dev和config-service-pro下config目录下的配置文件application-github.properties<br>里面只需要配置数据库相关信息即可</p>
</li>
<li><p>启动apollo-configservice容器</p>
<pre class="line-numbers language-none"><code class="language-none">docker run -d -p 8109:8080 --name apollo-configservice-dev -v D:\docker_mapping\apollo\config-service-dev\config:&#x2F;apollo-configservice&#x2F;config apolloconfig&#x2F;apollo-configservice:2.2.0  
docker run -d -p 8110:8080 --name apollo-configservice-pro -v D:\docker_mapping\apollo\config-service-pro\config:&#x2F;apollo-configservice&#x2F;config apolloconfig&#x2F;apollo-configservice:2.2.0  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>注意configservice 服务自带注册中心</p>
</blockquote>
</li>
<li><p>注意在 apollo_config 对应的库中找到表ServerConfig，修改eureka.service.url地址，地址为上面的config-service注册中心地址例如：<a href="http://本机IP:8109/eureka/">http://本机IP:8109/eureka/</a><br>dev和 pro config库都需要配置好，否则apollo-adminservice服务注册不上来</p>
</li>
<li><p>启动apollo-adminservice容器</p>
<pre class="line-numbers language-none"><code class="language-none">docker run -d -p 8111:8090 --name apollo-adminservice-dev -v D:\docker_mapping\apollo\admin-service-dev\config:&#x2F;apollo-adminservice&#x2F;config apolloconfig&#x2F;apollo-adminservice:2.2.0  
docker run -d -p 8112:8090 --name apollo-adminservice-pro -v D:\docker_mapping\apollo\admin-service-pro\config:&#x2F;apollo-adminservice&#x2F;config apolloconfig&#x2F;apollo-adminservice:2.2.0  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><p>启动apollo-portal容器  </p>
<ul>
<li>在apollo_portal_db 中 找到表ServerConfig  <ul>
<li>修改apollo.portal.envs 配置多环境例如：DEV,PRO </li>
<li>修改apollo.portal.meta.servers地址，地址为上面的config-service地址例如：{“DEV”:”<a href="http://10.92.33.112:8109&quot;,&quot;PRO&quot;:&quot;http://10.92.33.112:8110&quot;}">http://10.92.33.112:8109&quot;,&quot;PRO&quot;:&quot;http://10.92.33.112:8110&quot;}</a>  </li>
</ul>
</li>
<li>执行命令<br>docker run -p 8120:8070 -d —name apollo-portal -v D:\docker_mapping\apollo\protal\config:/apollo-portal/config apolloconfig/apollo-portal:2.2.0  </li>
</ul>
</li>
</ol>
<h4 id="naxus3"><a href="#naxus3" class="headerlink" title="naxus3"></a>naxus3</h4><p>docker run —privileged=true —name nexus -p 43633:43633 -p 9081:8081 -v D:\docker_mapping\nexus:/nexus-data -d sonatype/nexus3</p>
<h4 id="rabbitMQ"><a href="#rabbitMQ" class="headerlink" title="rabbitMQ"></a>rabbitMQ</h4><ol>
<li>单节点部署<pre class="line-numbers language-none"><code class="language-none">* 运行镜像 - 方式一：默认guest 用户，密码也是 guest
docker run -d --hostname my-rabbit --name rabbit -p 15672:15672 -p 5672:5672 rabbitmq:management

* 运行镜像 - 方式二：设置用户名和密码
docker run -d --hostname my-rabbit --name rabbit -e RABBITMQ_DEFAULT_USER&#x3D;user -e RABBITMQ_DEFAULT_PASS&#x3D;password -p 15672:15672 -p 5672:5672 rabbitmq:management<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>集群部署<br>命令：<pre class="line-numbers language-none"><code class="language-none">docker run -d --hostname myRabbit1 --name rabbit1 -p 15672:15672 -p 5672:5672 -e RABBITMQ_ERLANG_COOKIE&#x3D;&#39;rabbitcookie&#39; rabbitmq:management
docker run -d --hostname myRabbit2 --name rabbit2 -p 15672:15672 -p 5672:5672 --link rabbit1:myRabbit1 -e RABBITMQ_ERLANG_COOKIE&#x3D;&#39;rabbitcookie&#39; rabbitmq:management
docker run -d --hostname myRabbit3 --name rabbit3 -p 15672:15672 -p 5672:5672 --link rabbit1:myRabbit1 --link rabbit2:myRabbit2 -e RABBITMQ_ERLANG_COOKIE&#x3D;&#39;rabbitcookie&#39; rabbitmq:management<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
注意：</li>
</ol>
<ul>
<li>-e RABBITMQ_ERLANG_COOKIE=’rabbitcookie’ 必须设置为相同，因为 Erlang节点间是通过认证Erlang cookie的方式来允许互相通信的。</li>
<li>—link rabbit1:myRabbit1 —link rabbit2:myRabbit2 不要漏掉，否则会 一直处在 Cluster status of node rabbit@myRabbit3 … 没有反应<br>加入集群：<br>内存节点和磁盘节点的选择：</li>
</ul>
<p>每个RabbitMQ节点，要么是内存节点，要么是磁盘节点。内存节点将所有的队列、交换器、绑定、用户等元数据定义都存储在内存中；而磁盘节点将元数据存储在磁盘中。单节点系统只允许磁盘类型的节点，否则当节点重启以后，所有的配置信息都会丢失。如果采用集群的方式，可以选择至少配置一个节点为磁盘节点，其余部分配置为内存节点，，这样可以获得更快的响应。所以本集群中配置节点1位磁盘节点，节点2和节点3位内存节点。</p>
<p>集群中的第一个节点将初始元数据代入集群中，并且无须被告知加入。而第2个和之后加入的节点将加入它并获取它的元数据。要加入节点，需要进入Docker容器，重启RabbitMQ。<br>设置节点1：<br><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# docker exec -it rabbit1 bash
root@myRabbit1:&#x2F;# rabbitmqctl stop_app
RABBITMQ_ERLANG_COOKIE env variable support is deprecated and will be REMOVED in a future version. Use the $HOME&#x2F;.erlang.cookie file or the --erlang-cookie switch instead.
Stopping rabbit application on node rabbit@myRabbit1 ...
root@myRabbit1:&#x2F;# rabbitmqctl reset
RABBITMQ_ERLANG_COOKIE env variable support is deprecated and will be REMOVED in a future version. Use the $HOME&#x2F;.erlang.cookie file or the --erlang-cookie switch instead.
Resetting node rabbit@myRabbit1 ...
root@myRabbit1:&#x2F;# rabbitmqctl start_app
RABBITMQ_ERLANG_COOKIE env variable support is deprecated and will be REMOVED in a future version. Use the $HOME&#x2F;.erlang.cookie file or the --erlang-cookie switch instead.
Starting node rabbit@myRabbit1 ...
root@myRabbit1:&#x2F;# exit
exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>设置节点2：<br><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# docker exec -it rabbit2 bash
root@myRabbit2:&#x2F;# rabbitmqctl stop_app
RABBITMQ_ERLANG_COOKIE env variable support is deprecated and will be REMOVED in a future version. Use the $HOME&#x2F;.erlang.cookie file or the --erlang-cookie switch instead.
Stopping rabbit application on node rabbit@myRabbit2 ...
root@myRabbit2:&#x2F;# rabbitmqctl reset
RABBITMQ_ERLANG_COOKIE env variable support is deprecated and will be REMOVED in a future version. Use the $HOME&#x2F;.erlang.cookie file or the --erlang-cookie switch instead.
Resetting node rabbit@myRabbit2 ...
root@myRabbit2:&#x2F;# rabbitmqctl join_cluster --ram rabbit@myRabbit1 
RABBITMQ_ERLANG_COOKIE env variable support is deprecated and will be REMOVED in a future version. Use the $HOME&#x2F;.erlang.cookie file or the --erlang-cookie switch instead.
Clustering node rabbit@myRabbit2 with rabbit@myRabbit1
root@myRabbit2:&#x2F;# rabbitmqctl start_app
RABBITMQ_ERLANG_COOKIE env variable support is deprecated and will be REMOVED in a future version. Use the $HOME&#x2F;.erlang.cookie file or the --erlang-cookie switch instead.
Starting node rabbit@myRabbit2 ...
root@myRabbit2:&#x2F;# exit
exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>设置节点3：<br><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# docker exec -it rabbit3 bash
root@myRabbit3:&#x2F;# rabbitmqctl stop_app
RABBITMQ_ERLANG_COOKIE env variable support is deprecated and will be REMOVED in a future version. Use the $HOME&#x2F;.erlang.cookie file or the --erlang-cookie switch instead.
Stopping rabbit application on node rabbit@myRabbit3 ...
root@myRabbit3:&#x2F;# rabbitmqctl reset
RABBITMQ_ERLANG_COOKIE env variable support is deprecated and will be REMOVED in a future version. Use the $HOME&#x2F;.erlang.cookie file or the --erlang-cookie switch instead.
Resetting node rabbit@myRabbit3 ...
root@myRabbit3:&#x2F;# rabbitmqctl join_cluster --ram rabbit@myRabbit1 
RABBITMQ_ERLANG_COOKIE env variable support is deprecated and will be REMOVED in a future version. Use the $HOME&#x2F;.erlang.cookie file or the --erlang-cookie switch instead.
Clustering node rabbit@myRabbit3 with rabbit@myRabbit1
root@myRabbit3:&#x2F;# rabbitmqctl start_app
RABBITMQ_ERLANG_COOKIE env variable support is deprecated and will be REMOVED in a future version. Use the $HOME&#x2F;.erlang.cookie file or the --erlang-cookie switch instead.
Starting node rabbit@myRabbit3 ...
root@myRabbit3:&#x2F;# exit
exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<h4 id="RocketMQ5-0-Local模式-部署"><a href="#RocketMQ5-0-Local模式-部署" class="headerlink" title="RocketMQ5.0 (Local模式)部署"></a>RocketMQ5.0 (Local模式)部署</h4><blockquote>
<p>详细官方文档参考： <a href="https://rocketmq.apache.org/zh/docs/quickStart/02quickstartWithDocker">https://rocketmq.apache.org/zh/docs/quickStart/02quickstartWithDocker</a> （也有中文）<br>详细中文文档参考： <a href="https://rocketmq.io/">https://rocketmq.io/</a></p>
<ul>
<li>拉取RocketMQ镜像<br>docker pull apache/rocketmq:5.3.1</li>
</ul>
</blockquote>
<ul>
<li><p>创建容器共享网络<br>docker network create rocketmq</p>
</li>
<li><p>启动 NameServer<br>docker run -d —name rmqnamesrv -p 9876:9876 —network rocketmq apache/rocketmq:5.3.1 sh mqnamesrv</p>
</li>
<li><p>验证 NameServer 是否启动成功<br>docker logs -f rmqnamesrv</p>
</li>
<li><p>启动 Broker+Proxy  </p>
<div class="tabs" id="broker_proxy"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#broker_proxy-1">Linux</button></li><li class="tab"><button type="button" data-href="#broker_proxy-2">Windows</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="broker_proxy-1"><ul>
<li>配置 Broker 的 IP 地址<br><div class="note warning simple"><p>注意这里官方文档： echo “brokerIP1=127.0.0.1” &gt; broker.conf 这种方式配置后，代码连不上proxy 8081端口</p>
</div><br>所以改成：本地新建 broker.conf ，写入内容：<br>brokerIP1=127.0.0.1<br>namesrvAddr=xxxx.xxxx.xxx.xxxx:9876 （换成自己服务IP）<br>autoCreateTopicEnable = true<br>brokerClusterName = DefaultCluster<pre class="line-numbers language-none"><code class="language-none">* 启动 Broker 和 Proxy
docker run -d ^
--name rmqbroker ^
--net rocketmq ^
-p 10912:10912 -p 10911:10911 -p 10909:10909 ^
-p 8080:8080 -p 8081:8081 \
-e &quot;NAMESRV_ADDR&#x3D;rmqnamesrv:9876&quot; ^
-v %cd%\broker.conf:&#x2F;home&#x2F;rocketmq&#x2F;rocketmq-5.3.1&#x2F;conf&#x2F;broker.conf ^
apache&#x2F;rocketmq:5.3.1 sh mqbroker --enable-proxy \
-c &#x2F;home&#x2F;rocketmq&#x2F;rocketmq-5.3.1&#x2F;conf&#x2F;broker.conf

* 验证 Broker 是否启动成功
docker exec -it rmqbroker bash -c &quot;tail -n 10 &#x2F;home&#x2F;rocketmq&#x2F;logs&#x2F;rocketmqlogs&#x2F;proxy.log&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="broker_proxy-2"><ul>
<li>配置 Broker 的 IP 地址<br>跟上面方式一样<pre class="line-numbers language-none"><code class="language-none">* 启动 Broker 和 Proxy
docker run -d ^
--name rmqbroker ^
--net rocketmq ^
-p 10912:10912 -p 10911:10911 -p 10909:10909 ^
-p 8080:8080 -p 8081:8081 \
-e &quot;NAMESRV_ADDR&#x3D;rmqnamesrv:9876&quot; ^
-v %cd%\broker.conf:&#x2F;home&#x2F;rocketmq&#x2F;rocketmq-5.3.1&#x2F;conf&#x2F;broker.conf ^
apache&#x2F;rocketmq:5.3.1 sh mqbroker --enable-proxy \
-c &#x2F;home&#x2F;rocketmq&#x2F;rocketmq-5.3.1&#x2F;conf&#x2F;broker.conf

* 验证 Broker 是否启动成功
docker exec -it rmqbroker bash -c &quot;tail -n 10 &#x2F;home&#x2F;rocketmq&#x2F;logs&#x2F;rocketmqlogs&#x2F;proxy.log&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
</li>
</ul>
<div class="note simple"><p>至此，一个单节点副本的 RocketMQ 集群已经部署起来了，我们可以利用脚本进行简单的消息收发。</p>
</div>
<ul>
<li>SDK测试消息收发验证省略（参照官方文档） </li>
</ul>
<div class="note warning simple"><p>注意部署的是rocketmq5.0以上的版时，协议为gprc,而老版本用的是remoting协议，故以前的sdk可能连不上新部署的mq,具体参照官方文档</p>
</div>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>others</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/04/16/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>others</tag>
      </tags>
  </entry>
  <entry>
    <title>idea 开启远程访问docker(window)</title>
    <url>/2024/10/12/idea%20%E5%BC%80%E5%90%AF%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AEdocker(window)/</url>
    <content><![CDATA[<h4 id="docker-for-window"><a href="#docker-for-window" class="headerlink" title="docker for window"></a>docker for window</h4><ol>
<li>在设置里找到 General 将 “Expose daemon on tcp://localhost:2375 without TLS” 一项勾选中  </li>
<li>设置里找到 docker engine 将配置新增节点： “hosts”:[“tcp://0.0.0.0:2375”] 参考配置如下：  <pre class="line-numbers language-none"><code class="language-none">&#123;
  &quot;builder&quot;: &#123;
    &quot;gc&quot;: &#123;
      &quot;defaultKeepStorage&quot;: &quot;20GB&quot;,
      &quot;enabled&quot;: true
    &#125;
  &#125;,
  &quot;experimental&quot;: false,
  &quot;hosts&quot;: [
    &quot;tcp:&#x2F;&#x2F;0.0.0.0:2375&quot;
  ]
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h4 id="用管理员身份运行CMD命令"><a href="#用管理员身份运行CMD命令" class="headerlink" title="用管理员身份运行CMD命令"></a>用管理员身份运行CMD命令</h4><p>netsh interface portproxy reset<br>netsh interface portproxy add v4tov4 listenport=2375 connectaddress=localhost connectport=2375<br>net start iphlpsvc</p>
<blockquote>
<p>查看命令： netsh interface portproxy all</p>
</blockquote>
<h4 id="idea-配置"><a href="#idea-配置" class="headerlink" title="idea 配置"></a>idea 配置</h4><p>在services窗口中添加docker connection<br>如果docker for Window 运行在本电脑中，则直接勾选“docker for Window ”选项即可<br>如果是远程访问，则需要选择TCP socket 填写 Engine API URL 例如： tcp://远程计算机IP地址:2375  </p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>maven-archetype-plugin使用</title>
    <url>/2024/07/28/maven-archetype-plugin%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>导语： 做项目架构时发现公司项目结构不一致导致建项问题多，为了统一使用模版建项，故此使用此maven功能插件</p>
</blockquote>
<h4 id="使用总结"><a href="#使用总结" class="headerlink" title="使用总结"></a>使用总结</h4><ol>
<li>在项目 pom.xml 中 添加一下内容  <pre class="line-numbers language-none"><code class="language-none">&lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;
    &lt;artifactId&gt;maven-archetype-plugin&lt;&#x2F;artifactId&gt;
    &lt;version&gt;3.2.0&lt;&#x2F;version&gt;
    &lt;configuration&gt;
        &lt;propertyFile&gt;archetype.properties&lt;&#x2F;propertyFile&gt;
    &lt;&#x2F;configuration&gt;
&lt;&#x2F;plugin&gt;
       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>在项目根目录下新建 archetype.properties 内容如下<pre class="line-numbers language-none"><code class="language-none"># 定义模板groupId
archetype.groupId&#x3D;org.voice
# 定义模板artifactId（一般以 ‘-archetype’结尾区分）
archetype.artifactId&#x3D;webTemplateApplication-archetype
archetype.version&#x3D;1.0
# 排除的文件
excludePatterns&#x3D;**&#x2F;.idea&#x2F;**,**&#x2F;*.iml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>创建archetype骨架<br>在项目根目录下运行以下代码：<pre class="line-numbers language-none"><code class="language-none">mvn clean archetype:create-from-project<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>安装archetype到本地<br>进入target/generated-sources/archetype目录下，执行指令：</p>
<pre class="line-numbers language-none"><code class="language-none">mvn clean install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>生成archetype-catalog.xml文件  </p>
<pre class="line-numbers language-none"><code class="language-none">mvn archetype:crawl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ol>
<h4 id="如果需要安装archetype到远程naxus私服"><a href="#如果需要安装archetype到远程naxus私服" class="headerlink" title="如果需要安装archetype到远程naxus私服"></a>如果需要安装archetype到远程naxus私服</h4><p>进入target/generated-sources/archetype目录下，打开此目录下的pom.xml 文件 添加distributionManagement配置后执行 mvn deploy 命令   </p>
<blockquote>
<p>注：需在maven settings.xml 中增加私服账号密码配置<br><pre class="line-numbers language-none"><code class="language-none">&lt;distributionManagement&gt;
   &lt;repository&gt;
     &lt;id&gt;maven-releases&lt;&#x2F;id&gt;
     &lt;name&gt;Nexus Releases&lt;&#x2F;name&gt;
     &lt;url&gt;http:&#x2F;&#x2F;10.92.33.112:9081&#x2F;repository&#x2F;maven-releases&lt;&#x2F;url&gt;
   &lt;&#x2F;repository&gt;
   &lt;snapshotRepository&gt;
     &lt;id&gt;maven-snapshots&lt;&#x2F;id&gt;&lt;!-- id 需要对应 settings 中的配置 id --&gt;
     &lt;name&gt;Nexus Snapshot&lt;&#x2F;name&gt;
     &lt;url&gt;http:&#x2F;&#x2F;10.92.33.112:9081&#x2F;repository&#x2F;maven-snapshots&#x2F;&lt;&#x2F;url&gt;
   &lt;&#x2F;snapshotRepository&gt;
 &lt;&#x2F;distributionManagement&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
</blockquote>
<h4 id="使用模版创建项目"><a href="#使用模版创建项目" class="headerlink" title="使用模版创建项目"></a>使用模版创建项目</h4><ol>
<li><p>工具生成 以idea为例<br>依次选择菜单 file—&gt; new —&gt; project<br>在打开的弹框中 catalog  选择 Default_Local (这个从本地maven仓库中找到模版，之前步骤中已将模版坐标生成到本地的archetype-catalog.xml中)<br>archetype 点击 add 在弹框输入 在（archetype.properties）文件中对应的信息即可</p>
</li>
<li><p>使用脚本bat或shell生成项目</p>
</li>
</ol>
<p>shell</p>
<pre class="line-numbers language-none"><code class="language-none">mvn --version
mvn archetype:generate -B 
-DarchetypeCatalog&#x3D;http:&#x2F;&#x2F;127.0.0.1:8081&#x2F;nexus&#x2F;content&#x2F;repositories&#x2F;releases&#x2F;
-DarchetypeGroupId&#x3D;xx 
-DarchetypeArtifactId&#x3D;xx
-DarchetypeVersion&#x3D;xx
-DgroupId&#x3D;xx
-DartifactId&#x3D;xx
-Dversion&#x3D;xx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>bat<br><pre class="line-numbers language-none"><code class="language-none">mvn --version
mvn archetype:generate -B ^
-DarchetypeCatalog&#x3D;http:&#x2F;&#x2F;127.0.0.1:8081&#x2F;nexus&#x2F;content&#x2F;repositories&#x2F;releases&#x2F;
-DarchetypeGroupId&#x3D;xx
-DarchetypeArtifactId&#x3D;xx
-DarchetypeVersion&#x3D;1.0.0 
-DgroupId&#x3D;xx.xx
-DartifactId&#x3D;xx
-Dversion&#x3D;xx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
]]></content>
      <categories>
        <category>后端技术</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>docker之mysql主从集群</title>
    <url>/2024/01/09/mysql%E4%B8%BB%E4%BB%8E%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h4 id="创建两个docker环境下的mysql"><a href="#创建两个docker环境下的mysql" class="headerlink" title="创建两个docker环境下的mysql"></a>创建两个docker环境下的mysql</h4><p>1.新建两个my.cnf 分别放在 /home/guji/Volume/mysql5.7_3306/conf  ，  /home/guji/Volume/mysql5.7_3307/conf</p>
<p>分别在两个my.cnf 开启binlog</p>
<pre class="line-numbers language-none"><code class="language-none">#注意这个，搭建主从这个ID不能重复
server_id&#x3D;1
#可以填容器内的可访问日志路径+文件名 例如：&#x2F;var&#x2F;log&#x2F;mysql&#x2F;mybinlog
log_bin &#x3D; mysql-bin
# 3种不同的格式可选：mixed,statement,row，默认格式是 statement 推荐使用MIXED
binlog_format &#x3D; MIXED
# 日志过期(注意mysql8 版本此参数废弃，文章结尾参数里有说明)
expire_logs_days &#x3D; 30
# 可设置忽略库

# 可设置单独需同步库 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p><strong>更多参数参考最后给出my.cnf配置</strong></p>
</blockquote>
<h4 id="运行mysql-容器（注意这里拉取的mysql版本）"><a href="#运行mysql-容器（注意这里拉取的mysql版本）" class="headerlink" title="运行mysql 容器（注意这里拉取的mysql版本）"></a>运行mysql 容器（注意这里拉取的mysql版本）</h4><pre class="line-numbers language-none"><code class="language-none">#master
docker run -p 3306:3306 --name mysql -m 500m -v &#x2F;home&#x2F;guji&#x2F;Volume&#x2F;mysql5.7&#x2F;log:&#x2F;var&#x2F;log&#x2F;mysql -v &#x2F;home&#x2F;guji&#x2F;Volume&#x2F;mysql5.7&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -v &#x2F;home&#x2F;guji&#x2F;Volume&#x2F;mysql5.7_3306&#x2F;conf:&#x2F;etc&#x2F;mysql -e MYSQL_ROOT_PASSWORD&#x3D;root -d mysql:5.7.12

#slave
docker run -p 3307:3306 --name mysql -m 500m -v &#x2F;home&#x2F;guji&#x2F;Volume&#x2F;mysql5.7&#x2F;log:&#x2F;var&#x2F;log&#x2F;mysql -v &#x2F;home&#x2F;guji&#x2F;Volume&#x2F;mysql5.7&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -v &#x2F;home&#x2F;guji&#x2F;Volume&#x2F;mysql5.7_3307&#x2F;conf:&#x2F;etc&#x2F;mysql -e MYSQL_ROOT_PASSWORD&#x3D;root -d mysql:5.7.12
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p><em>注意一个问题：<strong>mysql8.0</strong>以上 配置文件挂载位置是 /etc/mysql/conf.d 即：/home/guji/Volume/mysql5.7_3307/conf:/etc/mysql/conf.d</em></p>
</blockquote>
<h4 id="主库授予用户远程访问权限"><a href="#主库授予用户远程访问权限" class="headerlink" title="主库授予用户远程访问权限"></a>主库授予用户远程访问权限</h4><ul>
<li><p>进入master mysql容器中输入 mysql -u root -p 输入密码后进去执行：</p>
<p>//注意一个很重要的地方</p>
<p><strong>如果登录出现  [Warning] World-writable config file ‘/xxx/my.cnf’ is ignored.,需要对容器内这个文件进行赋权 （chmod 644 /xxx/my.cnf），否则配置文件不生效！（这个地方有坑）</strong></p>
</li>
<li><p>看下binlog 是否开启 SHOW VARIABLES LIKE ‘%log_bin%’;开启后继续以下操作</p>
</li>
<li><p>CREATE USER ‘root’@’%’ IDENTIFIED BY ‘root’;</p>
</li>
<li><p>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root’@’%’;</p>
</li>
</ul>
<p>其中% 可配置成允许访问的IP,可以根据实际情况配置</p>
<blockquote>
<p><em>注意两个点问题：<strong>mysql8</strong>版本授权必须要先create user 然后才能执行grant ，mysql8还需要注意用户密码加密方式，老的一些连接客户端可能没有新的加密方式出现无法认证</em>  例如执行以下语句：</p>
<p>alter user ‘root’@’%’ identified with mysql_native_password by ‘root’;</p>
</blockquote>
<ul>
<li>执行 show master status; 查看主机的binlog 文件与位置 拿到master_log_file 和 master_log_pos 参数以下需要用</li>
</ul>
<h4 id="从库添加配置主库bin信息并开启slave"><a href="#从库添加配置主库bin信息并开启slave" class="headerlink" title="从库添加配置主库bin信息并开启slave"></a>从库添加配置主库bin信息并开启slave</h4><p>进入从库 mysql容器中输入 mysql -u root -p 输入密码后进去执行以下操作</p>
<ul>
<li><p>看下binlog 是否开启 SHOW VARIABLES LIKE ‘%log_bin%’;开启后继续以下操作</p>
</li>
<li><p>先停止slave </p>
<blockquote>
<p>stop slave;</p>
</blockquote>
</li>
<li><p>添加主服务器binlog采集信息</p>
<blockquote>
<p> change master to master_host=’10.92.32.33’, master_user=’root’, master_password=’root’, master_log_file=’mybinlog.000004’, master_log_pos=1447;</p>
</blockquote>
</li>
</ul>
<p><em>如果这个命令执行如果报错，可能容器以及由这个主库信息了，可以执行<strong>reset slave</strong>操作</em></p>
<ul>
<li><p>开启slave</p>
<blockquote>
<p>start slave;</p>
</blockquote>
</li>
<li><p>查看slave状态</p>
<blockquote>
<p>show slave status \G;</p>
<p>具体的错误日志可以执行查看错误日志sql</p>
<p>select * from replication_applier_status_by_worker;</p>
<p>然后一步步排查解决直到 slave 的 <strong>Slave_IO_Running</strong>和 <strong>Slave_SQL_Running</strong>都为<strong>yes</strong></p>
<p>并且<strong>Slave_IO_State</strong> 为 <strong>Waiting for master to send event</strong> 就初步成功了</p>
</blockquote>
</li>
</ul>
<h4 id="my-cnf完整配置"><a href="#my-cnf完整配置" class="headerlink" title="my.cnf完整配置"></a>my.cnf完整配置</h4><hr>
<pre class="line-numbers language-none"><code class="language-none">[mysqld]
#Mysql服务的唯一编号 每个mysql服务Id需唯一
server-id&#x3D;2001

#服务端口号 默认3306
port&#x3D;3306

#mysql安装根目录
#basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql

#mysql数据文件所在位置
datadir&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql

#pid
#pid-file&#x3D;&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pid

#设置socke文件所在目录
socket&#x3D;mysql.sock

#设置临时目录
#tmpdir&#x3D;&#x2F;tmp

#用户

user&#x3D;mysql

#允许访问的IP网段

bind-address&#x3D;0.0.0.0

#跳过密码登录

#skip-grant-tables

#主要用于MyISAM存储引擎,如果多台服务器连接一个数据库则建议注释下面内容
#skip-external-locking

#只能用IP地址检查客户端的登录，不用主机名
#skip_name_resolve&#x3D;1

#事务隔离级别，默认为可重复读，mysql默认可重复读级别（此级别下可能参数很多间隙锁，影响性能）
#transaction_isolation&#x3D;READ-COMMITTED

#数据库默认字符集,主流字符集支持一些特殊表情符号（特殊表情符占用4个字节）
character-set-server&#x3D;utf8mb4

#数据库字符集对应一些排序等规则，注意要和character-set-server对应
collation-server&#x3D;utf8mb4_general_ci

#设置client连接mysql时的字符集,防止乱码
init_connect&#x3D;&#39;SET NAMES utf8mb4&#39;

#是否对sql语句大小写敏感，1表示不敏感
lower_case_table_names&#x3D;1

#最大连接数
max_connections&#x3D;400

#最大错误连接数
max_connect_errors&#x3D;1000

#TIMESTAMP如果没有显示声明NOT NULL，允许NULL值
explicit_defaults_for_timestamp&#x3D;true

#SQL数据包发送的大小，如果有BLOB对象建议修改成1G
max_allowed_packet&#x3D;128M

#MySQL连接闲置超过一定时间后(单位：秒)将会被强行关闭
#MySQL默认的wait_timeout  值为8个小时, interactive_timeout参数需要同时配置才能生效
interactive_timeout&#x3D;1800
wait_timeout&#x3D;1800

#内部内存临时表的最大值 ，设置成128M。
#比如大数据量的group by ,order by时可能用到临时表，
#超过了这个值将写入磁盘，系统IO压力增大
tmp_table_size&#x3D;134217728
max_heap_table_size&#x3D;134217728

#禁用mysql的缓存查询结果集功能
#后期根据业务情况测试决定是否开启
#大部分情况下关闭下面两项
#query_cache_size &#x3D; 0
#query_cache_type &#x3D; 0

#数据库错误日志文件
#log-error&#x3D;&#x2F;var&#x2F;log&#x2F;mysqld.log

#慢查询sql日志设置
#slow_query_log&#x3D;1
#slow_query_log_file&#x3D;&#x2F;var&#x2F;log&#x2F;mysqld_slow.log

#检查未使用到索引的sql
log_queries_not_using_indexes&#x3D;1

#针对log_queries_not_using_indexes开启后，记录慢sql的频次、每分钟记录的条数
log_throttle_queries_not_using_indexes&#x3D;5

#作为从库时生效,从库复制中如何有慢sql也将被记录
log_slow_slave_statements&#x3D;1

#慢查询执行的秒数，必须达到此值可被记录
long_query_time&#x3D;8

#检索的行数必须达到此值才可被记为慢查询
min_examined_row_limit&#x3D;100


log_bin &#x3D; mysql-bin
log_error_verbosity &#x3D; 2
binlog_cache_size&#x3D;2M
max_binlog_size &#x3D; 256M
binlog_checksum &#x3D; NONE
binlog_format &#x3D; MIXED
binlog_rows_query_log_events &#x3D; 1
sync_binlog &#x3D; 1
#mysql8此参数废弃；
#expire_logs_days &#x3D; 7
#mysql8 默认设置的binlog过期时间是30天；
binlog_expire_logs_seconds&#x3D;604800

#replication settings

#server_id &#x3D; 101
#gtid_mode &#x3D; on
#enforce_gtid_consistency &#x3D; 1
#skip_slave_start &#x3D; 1
#master_info_repository &#x3D; TABLE
#relay_log_info_repository &#x3D; TABLE
#relay_log_recovery &#x3D; 1
#slave_rows_search_algorithms &#x3D; &#39;INDEX_SCAN,HASH_SCAN&#39;
#slave_parallel_type &#x3D; logical_clock
#slave_parallel_workers &#x3D; 4 #执行relay log的线程数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<hr>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>poi结合模板引擎导出word</title>
    <url>/2024/03/05/poi%E7%BB%93%E5%90%88%E6%A8%A1%E7%89%88%E5%BC%95%E6%93%8E%E5%AF%BC%E5%87%BAword/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>最近一期需求开发遇到导出一个复杂的word用代码实现巨难受，特意找了个便捷方法实现  </p>
<h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><pre class="line-numbers language-maven" data-language="maven"><code class="language-maven">&lt;dependency&gt;
         &lt;groupId&gt;cn.hutool&lt;&#x2F;groupId&gt;
         &lt;artifactId&gt;hutool-all&lt;&#x2F;artifactId&gt;
         &lt;version&gt;5.7.10&lt;&#x2F;version&gt;
     &lt;&#x2F;dependency&gt;
     &lt;dependency&gt;
         &lt;groupId&gt;cn.afterturn&lt;&#x2F;groupId&gt;
         &lt;artifactId&gt;easypoi-base&lt;&#x2F;artifactId&gt;
         &lt;version&gt;4.4.0&lt;&#x2F;version&gt;
     &lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
      <span class="token class-name">StringWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">JSONObject</span> json <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      json<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 创建模板引擎</span>
      <span class="token class-name">TemplateEngine</span> templateEngine <span class="token operator">=</span> <span class="token class-name">TemplateUtil</span><span class="token punctuation">.</span><span class="token function">createEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">Template</span> template <span class="token operator">=</span> templateEngine<span class="token punctuation">.</span><span class="token function">getTemplate</span><span class="token punctuation">(</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 合并模板和数据</span>
      template<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> writer<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">String</span> templateContent <span class="token operator">=</span> writer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">htmlToWord</span><span class="token punctuation">(</span>templateContent<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">htmlToWord</span><span class="token punctuation">(</span><span class="token class-name">String</span> htmlString<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>


      <span class="token class-name">FileOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/wordWrite.doc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>htmlString<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">POIFSFileSystem</span> fs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">POIFSFileSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">//对应于org.apache.poi.hdf.extractor.WordDocument</span>
      fs<span class="token punctuation">.</span><span class="token function">createDocument</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> <span class="token string">"WordDocument"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      fs<span class="token punctuation">.</span><span class="token function">writeFilesystem</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>
      is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"&lt;!DOCTYPE html>\n"</span> <span class="token operator">+</span>
              <span class="token string">"&lt;html lang=\"en\">\n"</span> <span class="token operator">+</span>
              <span class="token string">"&lt;head>\n"</span> <span class="token operator">+</span>
              <span class="token string">"    &lt;meta charset=\"UTF-8\">\n"</span> <span class="token operator">+</span>
              <span class="token string">"    &lt;title>Title&lt;/title>\n"</span> <span class="token operator">+</span>
              <span class="token string">"&lt;/head>\n"</span> <span class="token operator">+</span>
              <span class="token string">"&lt;body>\n"</span> <span class="token operator">+</span>
              <span class="token string">"    &lt;P>$&#123;name&#125; 这是名字&lt;/P>\n"</span> <span class="token operator">+</span>
              <span class="token string">"&lt;/body>\n"</span> <span class="token operator">+</span>
              <span class="token string">"&lt;/html>"</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> s<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="一些表单html简单示例"><a href="#一些表单html简单示例" class="headerlink" title="一些表单html简单示例"></a>一些表单html简单示例</h4><ul>
<li>收据<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>收据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
        <span class="token selector">*</span> <span class="token punctuation">&#123;</span>
            <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
            <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token selector">.container</span> <span class="token punctuation">&#123;</span>
            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
            <span class="token property">margin</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token selector">.title</span> <span class="token punctuation">&#123;</span>
            <span class="token property">font-size</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span>
            <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
            <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token selector">.table,
        .table-title</span> <span class="token punctuation">&#123;</span>
            <span class="token property">margin-top</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token selector">.on</span> <span class="token punctuation">&#123;</span>
            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token selector">.off</span> <span class="token punctuation">&#123;</span>
            <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token selector">table</span> <span class="token punctuation">&#123;</span>
            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
            <span class="token property">border-collapse</span><span class="token punctuation">:</span> collapse<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>收据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>收据日期：$&#123;receiptDate&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;display&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>收款对象：$&#123;customerName&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>table-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>费用明细：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>项目<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>单价<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>数量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>金额<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>#list</span> <span class="token attr-name">costList</span> <span class="token attr-name">as</span> <span class="token attr-name">cost</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$&#123;cost.name&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$&#123;cost.price&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$&#123;cost.amount&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$&#123;cost.money&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>#list</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">margin-top</span><span class="token punctuation">:</span>20px</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>收款单位：$&#123;companyName&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>交款人：$&#123;payer&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>以上就是代码示例内容，只要掌握html和css就可以基本解决word的复杂样式内容</p>
<p><strong><em>但请注意以下几点问题</em></strong></p>
<ol>
<li>html 格式导出的word格式为doc,只有doc格式支持，docx不支持html,如需要转换docx可引入其他工具类进行转换<blockquote>
<p>ps:<em>（word软件自身就可以转换没必要去实现这个，产品非得要实现纯属于故意为之~）</em>  </p>
</blockquote>
</li>
<li><p>html 中尽量使用table,p,span等元素标签 </p>
</li>
<li><p>html 中的引用使用ftl模版引擎</p>
</li>
<li><p>css样式有些并不支持，比如flex,div中设置width=百分比等等</p>
</li>
</ol>
<p>终于不用为调样式而烦恼了🥰~  </p>
]]></content>
      <categories>
        <category>后端技术</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>poi</tag>
        <tag>word</tag>
      </tags>
  </entry>
  <entry>
    <title>wmware centos7 虚拟机通过宿主机的Clash访问外网</title>
    <url>/2024/07/13/wmware%20centos7%20%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%80%9A%E8%BF%87%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9A%84Clash%E8%AE%BF%E9%97%AE%E5%A4%96%E7%BD%91/</url>
    <content><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>在使用虚拟机的时候，经常拉取不到镜像包，这个时候需要开启代理</p>
<h4 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h4><ol>
<li>允许局域网访问使用7890端口来提供网络代理服务。  </li>
<li>获取宿主机服务IP  </li>
</ol>
<h4 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h4><ol>
<li><p>直接配置系统代理  </p>
<pre class="line-numbers language-none"><code class="language-none">cat &gt;&gt; ~&#x2F;.bashrc &lt;&lt; EOF
export https_proxy&#x3D;http:&#x2F;&#x2F;192.168.0.103:7897
export http_proxy&#x3D;http:&#x2F;&#x2F;192.168.0.103:7897
export all_proxy&#x3D;socks5:&#x2F;&#x2F;192.168.0.103:7897
EOF
source ~&#x2F;.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>使用脚本来实现代理<br>创建脚本 setproxy.sh</p>
<pre class="line-numbers language-source" data-language="source"><code class="language-source">#!&#x2F;bin&#x2F;bash
# encoding: utf-8

Proxy_IP&#x3D;192.168.0.103
Proxy_Port&#x3D;7897

# Set System Proxy
function xyon()&#123;
    export https_proxy&#x3D;http:&#x2F;&#x2F;$Proxy_IP:$Proxy_Port
    export http_proxy&#x3D;http:&#x2F;&#x2F;$Proxy_IP:$Proxy_Port
    export all_proxy&#x3D;socks5:&#x2F;&#x2F;$Proxy_IP:$Proxy_Port
    echo -e &quot;System Proxy is $Proxy_IP:$Proxy_Port&quot;
&#125;

# unSet System Proxy
function xyoff()&#123;
    unset all_proxy
    unset https_proxy
    unset http_proxy
    echo -e &quot;System Proxy is Disabled&quot;
&#125;

# Default Function is Set Proxy
if [ $# !&#x3D; 0 ]
then
	if [ $1 &#x3D;&#x3D; &#39;off&#39; ]
	then
		xyoff
	elif [ $1 &#x3D;&#x3D; &#39;on&#39; ]
	then
		xyon
	else
		echo &quot;Please Input on or off!&quot;
	fi
else
	echo &quot;Please input command.&quot;
fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<p>调用脚本</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">chmod +x setproxy.sh
# 因为父子shell的问题，使用source来使得脚本设置来修改当前父Shell环境变量
# 开启代理
source setproxy.sh on
# 关闭代理
source setproxy.sh off<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="Windows-Firewall-打开-tcp-7890-端口"><a href="#Windows-Firewall-打开-tcp-7890-端口" class="headerlink" title="Windows Firewall 打开 tcp 7890 端口"></a>Windows Firewall 打开 tcp 7890 端口</h4><ul>
<li>按下 Windows + R 打开运行窗口</li>
<li>输入 wf.msc 然后回车即可</li>
</ul>
<p>放行 tcp 7890 端口就足够。</p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><pre class="line-numbers language-text" data-language="text"><code class="language-text">curl -I https://www.google.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>spring cloud alibaba相关笔记</title>
    <url>/2023/10/23/spring%20cloud%20alibaba%20%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>食物科普</title>
    <url>/2023/10/25/%E5%81%A5%E5%BA%B7%E9%A3%9F%E7%89%A9%E7%A7%91%E6%99%AE/</url>
    <content><![CDATA[<h4 id="低热量和低脂肪食物有哪些"><a href="#低热量和低脂肪食物有哪些" class="headerlink" title="低热量和低脂肪食物有哪些"></a>低热量和低脂肪食物有哪些</h4><p>低热量和低脂肪食物通常含有较少的能量和脂肪，适合需要控制体重或减少脂肪摄入的人群。以下是一些常见的低热量和低脂肪食物：</p>
<ol>
<li>蔬菜：蔬菜通常富含纤维、维生素和矿物质，而且热量较低。例如，西兰花、胡萝卜、黄瓜、芹菜等。</li>
<li>水果：水果是低热量的健康食物，富含维生素、矿物质和纤维。常见的低热量水果包括苹果、柑橘类水果、草莓、蓝莓等。</li>
<li>瘦肉：选择低脂肪的瘦肉，如鸡胸肉、鱼肉（比如鲈鱼、鳕鱼）、火鸡肉等。这些肉类含有较少的脂肪，但提供丰富的蛋白质。</li>
<li>蛋白质来源：蛋白质是重要的营养素，但部分蛋白质来源可能含有较高的脂肪。选择低脂肪的蛋白质来源，如鸡蛋白、豆腐、低脂奶制品（如低脂牛奶、低脂奶酪）等。</li>
<li>全谷类食物：全谷类食物富含纤维和复杂碳水化合物，而且相对较低热量。例如燕麦、全麦面包、糙米等。</li>
<li>低脂奶制品：选择低脂或非脂肪的奶制品，如低脂牛奶、非脂肪酸奶等，这些食物提供丰富的蛋白质和钙，但脂肪含量较低。</li>
<li>蔬果汁：新鲜榨取的蔬果汁是低热量且富含营养的选择，可以尽量选择无糖添加的纯果汁。</li>
<li>豆类：豆类是良好的蛋白质和纤维来源，同时含有较低的脂肪，如豆腐、扁豆、黑豆等。</li>
<li>高纤维谷物：除了全谷类食物，还有其他高纤维的谷物，如燕麦片、麦片、全麦面条等。</li>
<li>蔬菜汤：以蔬菜为主的汤食，可以提供丰富的营养，同时热量较低。</li>
<li>低脂冰淇淋和酸奶：选择低脂或无脂的冰淇淋和酸奶，可以满足甜食的欲望，同时控制脂肪摄入。</li>
<li>烤、蒸或煮的食物：相比于油炸或炒制的食物，烤、蒸或煮的食物通常含有更低的脂肪，是更健康的选择。</li>
</ol>
<h4 id="高热量和高脂肪食物有哪些"><a href="#高热量和高脂肪食物有哪些" class="headerlink" title="高热量和高脂肪食物有哪些"></a>高热量和高脂肪食物有哪些</h4><p>高热量和高脂肪食物通常富含能量，但过多摄入可能导致体重增加和健康问题。以下是一些常见的高热量和高脂肪食物：</p>
<ol>
<li>油炸食品：如薯条、炸鸡、炸鱼等，这些食物通常在烹饪过程中吸收了大量的油脂。</li>
<li>快餐：快餐通常含有较高的脂肪和热量，例如汉堡包、炸鸡块、薯条等。</li>
<li>糕点和甜点：蛋糕、巧克力、饼干、冰淇淋等含有大量的糖和脂肪，很容易导致热量过剩。</li>
<li>奶油和奶制品：奶油、黄油、乳酪等含有较高的脂肪，需要适量消费。</li>
<li>高脂肪肉类：肥牛、猪肉肥瘦相间的部位、鸭肉等富含脂肪的肉类，尽量适量食用。</li>
<li>坚果和种子：虽然坚果和种子富含健康的脂肪，但它们也具有较高的热量，适量食用为宜。</li>
</ol>
<p>请注意，脂肪在适量的情况下是身体所需的重要营养素之一，但过量摄入可能对健康产生不良影响。在饮食中要注意平衡，选择低脂肪、低热量的食物，搭配丰富的蔬菜、水果和全谷类食物，以维持健康的饮食平衡。</p>
<h4 id="高碘食物"><a href="#高碘食物" class="headerlink" title="高碘食物"></a>高碘食物</h4><ol>
<li>海带</li>
<li>紫菜</li>
<li>海鱼 如：鳕鱼、鲑鱼、鳗鱼等</li>
<li>昆布</li>
<li>海虾 如：黑河虾</li>
</ol>
<h4 id="低碘食物"><a href="#低碘食物" class="headerlink" title="低碘食物"></a>低碘食物</h4><ol>
<li>花甲</li>
<li>碘盐</li>
<li>螃蟹</li>
<li>绿豆</li>
<li>胡萝卜</li>
<li>菠菜</li>
<li>白芝麻</li>
</ol>
<h4 id="无碘食物"><a href="#无碘食物" class="headerlink" title="无碘食物"></a>无碘食物</h4><h4 id="低脂食物"><a href="#低脂食物" class="headerlink" title="低脂食物"></a>低脂食物</h4><h4 id="维生素A丰富的食物"><a href="#维生素A丰富的食物" class="headerlink" title="维生素A丰富的食物"></a>维生素A丰富的食物</h4><p>动物肝脏：猪肝、鹅肝、鸡肝等动物肝脏 含有大量的维生素A，能够快速被人体吸收。(4971ug/100g)</p>
<p>西兰花 :(1202ug/100g)</p>
<p>胡萝卜：这主要是胡萝卜中的胡萝卜素是维生素A的主要来源，胡萝卜素可以在人体内能转化成维生素A，同时也含维生素C (688ug/100g)</p>
<p>菠菜：有丰富的维生素A,同时富含也含铁</p>
<p>青蟹：也叫膏蟹 （402ug/100g）</p>
<p>紫苋菜：（248ug/100g）</p>
<p>韭菜</p>
<p>鸡蛋</p>
<h4 id="维生素B丰富的食物"><a href="#维生素B丰富的食物" class="headerlink" title="维生素B丰富的食物"></a>维生素B丰富的食物</h4><p>绿豆：绿豆含有丰富的B族维生素、矿物质等营养成分，其中维生素B1是鸡肉的17.5倍，维生素B2是禾谷类的2～4倍且高于猪肉、牛奶、鸡肉、鱼，钙是禾谷类的4倍、鸡肉的7倍，铁是鸡肉的4倍，磷是禾谷类及猪肉、鸡肉、鱼、鸡蛋的2倍，还含有多种人体所需的磷脂。同时也是低脂食物</p>
]]></content>
      <categories>
        <category>健康</category>
      </categories>
      <tags>
        <tag>食物</tag>
      </tags>
  </entry>
  <entry>
    <title>全屋公牛插座采购</title>
    <url>/2023/06/17/%E5%85%A8%E5%B1%8B%E5%85%AC%E7%89%9B%E6%8F%92%E5%BA%A7%E9%87%87%E8%B4%AD/</url>
    <content><![CDATA[<p>公牛插座 G51</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">种类</th>
<th style="text-align:center">数量</th>
<th style="text-align:center">价格</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">空开带漏电（2p 40A）</td>
<td style="text-align:center">1</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">空开（1p 20A）</td>
<td style="text-align:center">12</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">快弹式地插</td>
<td style="text-align:center">1</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">1开五孔（双控）</td>
<td style="text-align:center">7</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">正五孔</td>
<td style="text-align:center">56</td>
<td style="text-align:center">7.8</td>
</tr>
<tr>
<td style="text-align:center">一开单控</td>
<td style="text-align:center">4</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">一开双控</td>
<td style="text-align:center">6</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">二开单控</td>
<td style="text-align:center">2</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">二开双控</td>
<td style="text-align:center">1</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">三开单控</td>
<td style="text-align:center">2</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">三开双控</td>
<td style="text-align:center">2</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">三孔16A</td>
<td style="text-align:center">3</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>购物</category>
      </categories>
      <tags>
        <tag>装修公牛</tag>
      </tags>
  </entry>
  <entry>
    <title>装修清单</title>
    <url>/2023/10/17/%E5%90%89%E4%B8%BD%E8%A3%85%E4%BF%AE%E6%B8%85%E5%8D%95/</url>
    <content><![CDATA[<p><div style = "border:1px; width:100%; height:800px"></p>
<blockquote>
<blockquote>
<p>装修整理清单1.4版</p>
<p>&lt;iframe<br>style=”width: 100%;<br>    height: 100%”<br>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>
<h1 id="src-”https-preview-guzlife-site-onlinePreview-url-aHR0cDovL3ByZXZpZXcuZ3V6bGlmZS50b3A6ODAvZGVtby-2FlkInlkInkuL3kuL3nmoToo4Xkv67mtojotLnmuIXljZUoVjEuNCkoMSkueGxzeA-3D-3D-quot-gt"><a href="#src-”https-preview-guzlife-site-onlinePreview-url-aHR0cDovL3ByZXZpZXcuZ3V6bGlmZS50b3A6ODAvZGVtby-2FlkInlkInkuL3kuL3nmoToo4Xkv67mtojotLnmuIXljZUoVjEuNCkoMSkueGxzeA-3D-3D-quot-gt" class="headerlink" title="src=”https://preview.guzlife.site/onlinePreview?url=aHR0cDovL3ByZXZpZXcuZ3V6bGlmZS50b3A6ODAvZGVtby%2FlkInlkInkuL3kuL3nmoToo4Xkv67mtojotLnmuIXljZUoVjEuNCkoMSkueGxzeA%3D%3D&quot;&gt;"></a>src=”<a href="https://preview.guzlife.site/onlinePreview?url=aHR0cDovL3ByZXZpZXcuZ3V6bGlmZS50b3A6ODAvZGVtby%2FlkInlkInkuL3kuL3nmoToo4Xkv67mtojotLnmuIXljZUoVjEuNCkoMSkueGxzeA%3D%3D&quot;&gt;">https://preview.guzlife.site/onlinePreview?url=aHR0cDovL3ByZXZpZXcuZ3V6bGlmZS50b3A6ODAvZGVtby%2FlkInlkInkuL3kuL3nmoToo4Xkv67mtojotLnmuIXljZUoVjEuNCkoMSkueGxzeA%3D%3D&quot;&gt;</a></h1><p>src=”<a href="https://preview.guzlife.top/onlinePreview?url=aHR0cDovL3ByZXZpZXcuZ3V6bGlmZS50b3A6ODAvZGVtby%2FlkInlkInkuL3kuL3nmoToo4Xkv67mtojotLnmuIXljZUoVjEuNCkueGxzeA%3D%3D&quot;&gt;">https://preview.guzlife.top/onlinePreview?url=aHR0cDovL3ByZXZpZXcuZ3V6bGlmZS50b3A6ODAvZGVtby%2FlkInlkInkuL3kuL3nmoToo4Xkv67mtojotLnmuIXljZUoVjEuNCkueGxzeA%3D%3D&quot;&gt;</a></p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>bfdb8c93ac8cbe4806e6db96d99f37f2ec2b7dd9<br>&lt;/iframe&gt;<br>&lt;/div&gt;<br><a href="https://files.guzlife.top/hexo/zhuangxiu/吉吉丽丽的装修消费清单(V1.4">点击下载—&gt;</a>.xlsx)</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>装修清单</category>
      </categories>
      <tags>
        <tag>装修</tag>
      </tags>
  </entry>
  <entry>
    <title>吉丽装修记【1】</title>
    <url>/2022/12/09/%E5%90%89%E4%B8%BD%E8%A3%85%E4%BF%AE%E8%AE%B0%E3%80%901%E3%80%91/</url>
    <content><![CDATA[<div style = "border:1px; width:100%; height:800px">
>> 装修整理清单1.4版
<iframe 
style="width: 100%;
    height: 100%" 
src="https://preview.guzlife.site/onlinePreview?url=aHR0cDovL3ByZXZpZXcuZ3V6bGlmZS50b3A6ODAvZGVtby%2FlkInlkInkuL3kuL3nmoToo4Xkv67mtojotLnmuIXljZUoVjEuNCkoMSkueGxzeA%3D%3D">
</iframe>
</div>

<div style="position: relative;
    padding-bottom: 56.25%;
    padding-top: 30px;
    height: 0;
    overflow: hidden;">
<iframe allowfullscreen="true" frameborder="0" style=" position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;"
    src="https://files.guzlife.top/video/%E6%94%B6%E6%88%BF.mp4">
</iframe>
</div>]]></content>
      <categories>
        <category>吉丽装修记</category>
      </categories>
      <tags>
        <tag>装修</tag>
      </tags>
  </entry>
  <entry>
    <title>吉丽装修记【2】</title>
    <url>/2023/02/08/%E5%90%89%E4%B8%BD%E8%A3%85%E4%BF%AE%E8%AE%B0%E3%80%902%E3%80%91/</url>
    <content><![CDATA[<p><div style = "border:1px; width:100%; height:800px"></p>
<blockquote>
<blockquote>
<p>装修整理文档1.1版</p>
<p><iframe 
style="width: 100%;
    height: 90%" 
src="https://preview.guzlife.top/onlinePreview?url=aHR0cHM6Ly9maWxlcy5ndXpsaWZlLnRvcC9oZXhvL3podWFuZ3hpdS%2Foo4Xkv65WMS4xLmRvY3g%3D">
</iframe><br>&lt;/div&gt;<br><a href="https://files.guzlife.top/hexo/zhuangxiu/装修V1.1.docx">点击下载—&gt;</a></p>
<p>装修设计方案1<br><img src="https://files.guzlife.top/hexo/zhuangxiu/设计稿1.png" alt="设计稿1"></p>
<p>装修设计方案2<br><img src="https://files.guzlife.top/hexo/zhuangxiu/设计稿2.jpg" alt="设计稿2"></p>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>吉丽装修记</category>
      </categories>
      <tags>
        <tag>装修</tag>
      </tags>
  </entry>
  <entry>
    <title>吉丽装修记【终】</title>
    <url>/2023/08/08/%E5%90%89%E4%B8%BD%E8%A3%85%E4%BF%AE%E8%AE%B0%E3%80%90%E7%BB%88%E3%80%91/</url>
    <content><![CDATA[<h5 id="装修交付视频1-0"><a href="#装修交付视频1-0" class="headerlink" title="装修交付视频1.0"></a>装修交付视频1.0</h5><div style="position: relative;
    padding-bottom: 56.25%;
    padding-top: 30px;
    width: 100%;
    height: 50%;
    overflow: hidden;">
<iframe allowfullscreen="true" frameborder="0" style=" position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;"
    src="https://files.guzlife.site/video/%E8%A3%85%E4%BF%AE%E4%BA%A4%E4%BB%981.0.mp4">
</iframe>
</div>

<h5 id="PDF设计图纸预览"><a href="#PDF设计图纸预览" class="headerlink" title="PDF设计图纸预览"></a>PDF设计图纸预览</h5><div style = "border:1px; width:100%; height:1200px;">
<iframe 
style="width: 100%;
    height: 100%" 
src="http://preview.guzlife.site/onlinePreview?url=aHR0cDovL3ByZXZpZXcuZ3V6bGlmZS50b3A6ODAvZGVtby%2FpmIXmsZ%2FlupwuZG9jeA%3D%3D">
</iframe>
</div>


<h5 id="PDF设计图纸下载"><a href="#PDF设计图纸下载" class="headerlink" title="PDF设计图纸下载"></a>PDF设计图纸下载</h5><p><a href="https://files.guzlife.site/hexo/zhuangxiu/白沙洲阅江府.pdf">点击下载—&gt;</a></p>
<h5 id="10栋总平面图下载"><a href="#10栋总平面图下载" class="headerlink" title="10栋总平面图下载"></a>10栋总平面图下载</h5><p><a href="https://files.guzlife.site/hexo/zhuangxiu/10栋总平面图.pdf">点击下载—&gt;</a></p>
<h5 id="10栋2单元dwg户型图下载"><a href="#10栋2单元dwg户型图下载" class="headerlink" title="10栋2单元dwg户型图下载"></a>10栋2单元dwg户型图下载</h5><p><a href="https://files.guzlife.site/hexo/zhuangxiu/10栋01户户型平面图_t3.dwg">点击下载—&gt;</a></p>
]]></content>
      <categories>
        <category>吉丽装修记</category>
      </categories>
      <tags>
        <tag>装修</tag>
      </tags>
  </entry>
  <entry>
    <title>利用List函数式接口比较集合</title>
    <url>/2022/12/08/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h2 id="结果集合封装类"><a href="#结果集合封装类" class="headerlink" title="结果集合封装类"></a>结果集合封装类</h2><blockquote>
<p> / <em>*
     </em></p>
<pre><code> * 比较结果集合封装类
 * /
</code></pre><p>public class CompareListSameResponseModel<T> {<br>    /**</p>
<pre><code> * 新增数组，入参
 * /
private List&lt;T&gt; addList;
/**
 * 修改数组，入参
 * /
private List&lt;T&gt; updateList;
/**
 * 删除数组，数据库
 * /
private List&lt;T&gt; deleteList;
</code></pre><p>}</p>
</blockquote>
<h2 id="比较工具类方法"><a href="#比较工具类方法" class="headerlink" title="比较工具类方法"></a>比较工具类方法</h2><blockquote>
<p> /**</p>
<pre><code> * 获取新增列表、更新列表、删除列表
 * 数据库未存在uniqueKey，新增数据有uniqueKey，则为新增数据
 * 数据库未存在uniqueKey，新增数据也没有uniqueKey，无操作
 * 数据库存在uniqueKey，新增数据有uniqueKey，则为修改数据
 * 数据库存在uniqueKey，新增数据没有uniqueKey，则为删除数据
 *
 * @param uniqueKey 根据uniqueKey是否存在于数据库中来进行比较
 * @return
 * /
public static &lt;T&gt; CompareListSameResponseModel&lt;T&gt; getChangeListByUniqueKey(List&lt;T&gt; requestList, List&lt;T&gt; dbList, Function&lt;? super T, ?&gt; uniqueKey) &#123;
    CompareListSameResponseModel&lt;T&gt; responseModel = new CompareListSameResponseModel&lt;&gt;();
    List&lt;T&gt; insertList;
    List&lt;T&gt; updateList;
    List&lt;T&gt; deleteList;
    //list 为空处理
    requestList = Optional.ofNullable(requestList).orElse(new ArrayList&lt;&gt;());
    dbList = Optional.ofNullable(dbList).orElse(new ArrayList&lt;&gt;());
    Set&lt;?&gt; requestKeySet = requestList
            .stream()
            .map(uniqueKey)
            .collect(Collectors.toSet());
    Set&lt;?&gt; dbKeySet = dbList
            .stream()
            .map(uniqueKey)
            .collect(Collectors.toSet());
    //新增，从request数据中，去除db中已存在的数据
    insertList = requestList
            .stream()
            .filter(x -&gt; !dbKeySet.contains(uniqueKey.apply(x)))
            .collect(Collectors.toList());
    //修改，找出request数据，与db都有的相同的数据
    updateList = requestList
            .stream()
            .filter(x -&gt; requestKeySet.contains(uniqueKey.apply(x)) &amp;&amp; dbKeySet.contains(uniqueKey.apply(x)))
            .collect(Collectors.toList());
</code></pre><p> //       删除，从dblist中找出，request没有的数据<br>        deleteList = dbList<br>                .stream()<br>                .filter(x -&gt; !requestKeySet.contains(uniqueKey.apply(x)))<br>                .collect(Collectors.toList());<br>        responseModel.setAddList(insertList);<br>        responseModel.setUpdateList(updateList);<br>        responseModel.setDeleteList(deleteList);<br>        return responseModel;<br>    }</p>
</blockquote>
<h4 id="上面方式用于比较对象泛型一致的情况，但开发的过程中一般是-请求集合-List-和数据库集合List-进行比对，使用方法是需要先将-List-转成-List-后再去使用工具进行比较得到增删改。此时满足大部分情况，但这种先转换的方式带来问题，那就是转换之后得的增删改对象都是-DbModel，原来requestModel里的属性-DbModel中没有就会存在后续代码-増删改集合中就无法使用到-requestModel中的一些属性"><a href="#上面方式用于比较对象泛型一致的情况，但开发的过程中一般是-请求集合-List-和数据库集合List-进行比对，使用方法是需要先将-List-转成-List-后再去使用工具进行比较得到增删改。此时满足大部分情况，但这种先转换的方式带来问题，那就是转换之后得的增删改对象都是-DbModel，原来requestModel里的属性-DbModel中没有就会存在后续代码-増删改集合中就无法使用到-requestModel中的一些属性" class="headerlink" title="上面方式用于比较对象泛型一致的情况，但开发的过程中一般是 请求集合 List 和数据库集合List 进行比对，使用方法是需要先将 List 转成 List 后再去使用工具进行比较得到增删改。此时满足大部分情况，但这种先转换的方式带来问题，那就是转换之后得的增删改对象都是 DbModel，原来requestModel里的属性 DbModel中没有就会存在后续代码 増删改集合中就无法使用到 requestModel中的一些属性"></a>上面方式用于比较对象泛型一致的情况，但开发的过程中一般是 请求集合 List<requestModel> 和数据库集合List<DbModel> 进行比对，使用方法是需要先将 List<requestModel> 转成 List<DbModel> 后再去使用工具进行比较得到增删改。此时满足大部分情况，但这种先转换的方式带来问题，那就是转换之后得的增删改对象都是 DbModel，原来requestModel里的属性 DbModel中没有就会存在后续代码 増删改集合中就无法使用到 requestModel中的一些属性</h4><h2 id="优化上面的代码方案"><a href="#优化上面的代码方案" class="headerlink" title="优化上面的代码方案"></a>优化上面的代码方案</h2><blockquote>
<p>可以将泛型定义成两个 CompareListSameResponseModel<T,V> ,入参传入两个Function即可</p>
</blockquote>
]]></content>
      <categories>
        <category>后端技术</category>
      </categories>
      <tags>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>利用sql 生成 带swagger注解的实体</title>
    <url>/2023/02/08/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<p>— 设置参数：schema数据库</p>
<p>SET @table_schema=’ibp_enrolment’;</p>
<p>— 设置参数：表名称</p>
<p>SET @table_name=’bs_warehouse_file_config’;</p>
<p>SELECT</p>
<p>CONCAT(‘@ApiModelProperty(value=”‘,main.COLUMN_COMMENT,’”)\n’,’private ‘,</p>
<p>CASE</p>
<p>WHEN LOWER(main.DATA_TYPE) LIKE ‘varchar%’ OR LOWER(main.DATA_TYPE) LIKE ‘char%’ OR LOWER(main.DATA_TYPE) LIKE ‘LONGTEXT%’ OR LOWER(main.DATA_TYPE) LIKE ‘tinytext%’ THEN ‘String’</p>
<p>WHEN LOWER(main.DATA_TYPE) LIKE ‘decimal%’ OR LOWER(main.DATA_TYPE) = ‘float’THEN ‘Double’</p>
<p>WHEN LOWER(main.DATA_TYPE)=’int’ OR LOWER(main.DATA_TYPE)=’tinyint’ THEN ‘Integer’</p>
<p>WHEN LOWER(main.DATA_TYPE)=’bigint’ THEN ‘Long’</p>
<p>WHEN LOWER(main.DATA_TYPE)=’datetime’ OR LOWER(main.DATA_TYPE)=’timestamp’ THEN ‘Timestamp’</p>
<p>WHEN LOWER(main.DATA_TYPE)=’date’ THEN ‘Date’</p>
<p>ELSE ‘’</p>
<p>END,’ ‘,</p>
<p>underlineToCamel(main.COLUMN_NAME),</p>
<p>‘=’,</p>
<p>CASE</p>
<p>WHEN LOWER(main.DATA_TYPE) LIKE ‘varchar%’ OR LOWER(main.DATA_TYPE) LIKE ‘char%’ THEN ‘\”\”‘</p>
<p>WHEN LOWER(main.DATA_TYPE) LIKE ‘decimal%’ THEN IF(main.NUMERIC_SCALE=1,’0.0D’,IF(main.NUMERIC_SCALE=2,’0.00D’,IF(main.NUMERIC_SCALE=3,’0.000D’,IF(main.NUMERIC_SCALE=4,’0.0000D’,’0.00D’))))</p>
<p>WHEN LOWER(main.DATA_TYPE) = ‘float’ THEN ‘0.0D’</p>
<p>WHEN LOWER(main.DATA_TYPE)=’int’ OR LOWER(main.DATA_TYPE)=’tinyint’ THEN ‘0’</p>
<p>WHEN LOWER(main.DATA_TYPE)=’bigint’ THEN ‘0L’</p>
<p>WHEN LOWER(main.DATA_TYPE)=’datetime’ OR LOWER(main.DATA_TYPE)=’timestamp’ THEN ‘Timestamp.valueOf(LocalDateTime.now())’</p>
<p>WHEN LOWER(main.DATA_TYPE)=’date’ THEN ‘Date.valueOf(LocalDate.now())’</p>
<p>ELSE ‘’</p>
<p>END,</p>
<p>‘;’) AS VO,</p>
<p>CONCAT(‘/<em>*\n’,’</em>‘,main.COLUMN_COMMENT,’\n*/\n’,</p>
<p>CASE WHEN main.COLUMN_NAME=’valid’ THEN ‘@TableLogic(value = “0”, delval = “1”)\n@TableField(fill = FieldFill.INSERT)\n’</p>
<p>WHEN main.COLUMN_NAME=’version’ THEN ‘@Version\n@TableField(fill = FieldFill.INSERT_UPDATE)\n’</p>
<p>WHEN main.COLUMN_NAME=’created_user_code’ THEN ‘@TableField(fill = FieldFill.INSERT)\n’</p>
<p>WHEN main.COLUMN_NAME=’created_time’ THEN ‘@TableField(fill = FieldFill.INSERT)\n’</p>
<p>WHEN main.COLUMN_NAME=’updated_user_code’ THEN ‘@TableField(fill = FieldFill.INSERT_UPDATE)\n’</p>
<p>WHEN main.COLUMN_NAME=’updated_time’ THEN ‘@TableField(fill = FieldFill.INSERT_UPDATE)\n’</p>
<p>WHEN main.COLUMN_NAME=’id’ THEN ‘@TableId(type = IdType.AUTO)\n’</p>
<p>ELSE ‘’</p>
<p>END</p>
<p>,’private ‘,</p>
<p>CASE</p>
<p>WHEN LOWER(main.DATA_TYPE) LIKE ‘varchar%’ OR LOWER(main.DATA_TYPE) LIKE ‘char%’ OR LOWER(main.DATA_TYPE) LIKE ‘LONGTEXT%’ OR LOWER(main.DATA_TYPE) LIKE ‘tinytext%’ THEN ‘String’</p>
<p>WHEN LOWER(main.DATA_TYPE) LIKE ‘decimal%’ OR LOWER(main.DATA_TYPE) = ‘float’THEN ‘Double’</p>
<p>WHEN LOWER(main.DATA_TYPE)=’int’ OR LOWER(main.DATA_TYPE)=’tinyint’ THEN ‘Integer’</p>
<p>WHEN LOWER(main.DATA_TYPE)=’bigint’ THEN ‘Long’</p>
<p>WHEN LOWER(main.DATA_TYPE)=’datetime’ OR LOWER(main.DATA_TYPE)=’timestamp’ THEN ‘Timestamp’</p>
<p>WHEN LOWER(main.DATA_TYPE)=’date’ THEN ‘Date’</p>
<p>ELSE ‘’</p>
<p>END,’ ‘,</p>
<p>underlineToCamel(main.COLUMN_NAME),</p>
<p>‘=’,</p>
<p>CASE</p>
<p>WHEN LOWER(main.DATA_TYPE) LIKE ‘varchar%’ OR LOWER(main.DATA_TYPE) LIKE ‘char%’ THEN ‘\”\”‘</p>
<p>WHEN LOWER(main.DATA_TYPE) LIKE ‘decimal%’ THEN IF(main.NUMERIC_SCALE=1,’0.0D’,IF(main.NUMERIC_SCALE=2,’0.00D’,IF(main.NUMERIC_SCALE=3,’0.000D’,IF(main.NUMERIC_SCALE=4,’0.0000D’,’0.00D’))))</p>
<p>WHEN LOWER(main.DATA_TYPE) = ‘float’ THEN ‘0.0D’</p>
<p>WHEN LOWER(main.DATA_TYPE)=’int’ OR LOWER(main.DATA_TYPE)=’tinyint’ THEN ‘0’</p>
<p>WHEN LOWER(main.DATA_TYPE)=’bigint’ THEN ‘0L’</p>
<p>WHEN LOWER(main.DATA_TYPE)=’datetime’ OR LOWER(main.DATA_TYPE)=’timestamp’ THEN ‘Timestamp.valueOf(LocalDateTime.now())’</p>
<p>WHEN LOWER(main.DATA_TYPE)=’date’ THEN ‘Date.valueOf(LocalDate.now())’</p>
<p>ELSE ‘’</p>
<p>END,</p>
<p>‘;’) AS ‘Entity’</p>
<p>FROM</p>
<p>information_schema.<code>COLUMNS</code> main</p>
<p>WHERE</p>
<p>main.TABLE_SCHEMA = @table_schema</p>
<p>AND main.TABLE_NAME = @table_name;</p>
<p>其中转驼峰的函数underlineToCamel 如下：</p>
<p>CREATE DEFINER=<code>vx</code>@<code>%</code> FUNCTION <code>underlineToCamel</code>(paramString VARCHAR(200)) RETURNS varchar(200) CHARSET utf8</p>
<p>DETERMINISTIC</p>
<p>begin</p>
<p>set paramString = replace(paramString, ‘_a’, ‘A’);</p>
<p>set paramString = replace(paramString, ‘_b’, ‘B’);</p>
<p>set paramString = replace(paramString, ‘_c’, ‘C’);</p>
<p>set paramString = replace(paramString, ‘_d’, ‘D’);</p>
<p>set paramString = replace(paramString, ‘_e’, ‘E’);</p>
<p>set paramString = replace(paramString, ‘_f’, ‘F’);</p>
<p>set paramString = replace(paramString, ‘_g’, ‘G’);</p>
<p>set paramString = replace(paramString, ‘_h’, ‘H’);</p>
<p>set paramString = replace(paramString, ‘_i’, ‘I’);</p>
<p>set paramString = replace(paramString, ‘_j’, ‘J’);</p>
<p>set paramString = replace(paramString, ‘_k’, ‘K’);</p>
<p>set paramString = replace(paramString, ‘_l’, ‘L’);</p>
<p>set paramString = replace(paramString, ‘_m’, ‘M’);</p>
<p>set paramString = replace(paramString, ‘_n’, ‘N’);</p>
<p>set paramString = replace(paramString, ‘_o’, ‘O’);</p>
<p>set paramString = replace(paramString, ‘_p’, ‘P’);</p>
<p>set paramString = replace(paramString, ‘_q’, ‘Q’);</p>
<p>set paramString = replace(paramString, ‘_r’, ‘R’);</p>
<p>set paramString = replace(paramString, ‘_s’, ‘S’);</p>
<p>set paramString = replace(paramString, ‘_t’, ‘T’);</p>
<p>set paramString = replace(paramString, ‘_u’, ‘U’);</p>
<p>set paramString = replace(paramString, ‘_v’, ‘V’);</p>
<p>set paramString = replace(paramString, ‘_w’, ‘W’);</p>
<p>set paramString = replace(paramString, ‘_x’, ‘X’);</p>
<p>set paramString = replace(paramString, ‘_y’, ‘Y’);</p>
<p>set paramString = replace(paramString, ‘_z’, ‘Z’);</p>
<p>set paramString = replace(paramString, ‘_’, ‘’);</p>
<p>RETURN paramString;</p>
<p>end</p>
]]></content>
      <categories>
        <category>后端技术</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>父工程从springboot1.5.x 升级到2.5.15总结.md</title>
    <url>/2024/04/23/%E7%88%B6%E5%B7%A5%E7%A8%8B%E4%BB%8Espringboot1.5.x%20%E5%8D%87%E7%BA%A7%E5%88%B02.5.15%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h4 id="包冲突"><a href="#包冲突" class="headerlink" title="包冲突"></a>包冲突</h4><ol>
<li>log4j高版本与框架其他引入的jar可能会产生冲突 </li>
<li>如果项目是gradle项目坑巨多 最大的问题是这个springboot2.5.15 不能用gradle4.9进行编译打包，需要使用更高版本进行编译，而更高版本的gradle语法糖很多地方不兼容老版本导致只能遇到一个坑就填一个…</li>
</ol>
<h4 id="配置写法问题"><a href="#配置写法问题" class="headerlink" title="配置写法问题"></a>配置写法问题</h4><ol>
<li>eureka 配置写法改动<br>老版本eureka.instance.hostname 配置 写法${spring.cloud.client.ipAddress}<br>新版本eureka.instance.hostname 配置 写法 ${spring.cloud.client.ip-address}:${server.port}  </li>
<li>配置下划线写法<br>老版本配置中的属性节点可以使用下划线不，不会有报错提示<br>新版本配置中属性节点使用下划线会有报错提示  </li>
<li>会废弃配置</li>
<li>废弃hystrix，ribbon等，如需要引用需要单独引入包，springcloud官方bom等父工程并不包含hystrix</li>
</ol>
<h4 id="mysql-驱动兼容性问题"><a href="#mysql-驱动兼容性问题" class="headerlink" title="mysql 驱动兼容性问题"></a>mysql 驱动兼容性问题</h4><p>首先看个例子：<br><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TestList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.vx.TestModel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
	select '' as startDate from test 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>以上sql 查出的startDate属性如果在TestModel定义为Date类型时<br>在msyql8.0.xx版本的驱动下会报以下错</p>
<blockquote>
<p>Error attempting to get column ‘startDate’ from result set.  Cause: java.sql.SQLDataException: Unsupported conversion from LONG to java.sql.Timestamp  </p>
</blockquote>
<p>而老版本（5.0.xx）驱动不会报错</p>
<h4 id="连接池参数问题"><a href="#连接池参数问题" class="headerlink" title="连接池参数问题"></a>连接池参数问题</h4><p>druild 数据库连接参数以及连接池有些参数影响到线上空闲连接池回收机制，在和老版本相同配置情况下，新版本会出现以下错误：<br><pre class="line-numbers language-none"><code class="language-none">	2024-04-14 09:35:35.045 [Druid-ConnectionPool-Create-223696575] ERROR com.alibaba.druid.pool.DruidDataSource - create connection SQLException, 
	url: jdbc:mysql:&#x2F;&#x2F;172.24.0.24:33306&#x2F;ibp_platform?useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF8&amp;zeroDateTimeBehavior&#x3D;convertToNull&amp;useSSL&#x3D;false&amp;allowMultiQueries&#x3D;true, 
	errorCode 0, state 08S01
	com.mysql.cj.jdbc.exceptions.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at com.mysql.cj.jdbc.exceptions.SQLError.createCommunicationsException(SQLError.java:174)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:64)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:836)
	at com.mysql.cj.jdbc.ConnectionImpl.&lt;init&gt;(ConnectionImpl.java:456)
	at com.mysql.cj.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:246)
	at com.mysql.cj.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:197)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:118)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:232)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:112)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1703)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1786)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:2910)
Caused by: com.mysql.cj.exceptions.CJCommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.GeneratedConstructorAccessor112.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:61)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:105)
	at com.mysql.cj.exceptions.ExceptionFactory.createException(ExceptionFactory.java:151)
	at com.mysql.cj.exceptions.ExceptionFactory.createCommunicationsException(ExceptionFactory.java:167)
	at com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:91)
	at com.mysql.cj.NativeSession.connect(NativeSession.java:144)
	at com.mysql.cj.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:956)
	at com.mysql.cj.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:826)
	... 9 common frames omitted
Caused by: java.net.ConnectException: Connection timed out (Connection timed out)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:607)
	at com.mysql.cj.protocol.StandardSocketFactory.connect(StandardSocketFactory.java:155)
	at com.mysql.cj.protocol.a.NativeSocketConnection.connect(NativeSocketConnection.java:65)
	... 12 common frames omitted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
]]></content>
      <categories>
        <category>后端技术</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
        <tag>gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>结合apollo动态刷新日志级别</title>
    <url>/2022/12/08/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><blockquote>
<p>/**</p>
<ul>
<li>结合apollo动态刷新日志级别</li>
<li>@author: zhumh17</li>
<li><p>@date: 11点50分<br>*/<br> @Configuration<br> public class LogListenerConfig {</p>
<p> private static final Logger logger = LoggerFactory.getLogger&gt; (LoggerConfiguration.class);<br> /**</p>
<ul>
<li><p>监听关键字，当配置中心的依次开头的配置发生变化时，日志级别刷新<br>*/<br>private static final String LOGGER_TAG = “logging.level”;</p>
<p>private LoggingSystem loggingSystem;<br>public LogListenerConfig(LoggingSystem loggingSystem) {<br> Assert.notNull(loggingSystem, “LoggingSystem must not be null”);<br> this.loggingSystem = loggingSystem;<br>}</p>
</li>
</ul>
</li>
</ul>
<pre><code>@ApolloConfigChangeListener(value = &quot;application.yml&quot;)
public void configChangeLister(ConfigChangeEvent changeEvent) &#123;
    refreshLoggingLevels(changeEvent);
&#125;

private void refreshLoggingLevels(ConfigChangeEvent changeEvent) &#123;
    ConfigChange configChange = changeEvent.getChange(LOGGER_TAG);
    String strLevel = configChange.getNewValue();
    LogLevel level = LogLevel.valueOf(strLevel.toUpperCase());
    loggingSystem.setLogLevel(&quot;com.vx&quot;, level);
    logger.info(&quot;日志级别变化&#123;&#125;:&#123;&#125;&quot;,LOGGER_TAG,strLevel);
&#125;
</code></pre><p>}</p>
</blockquote>
<h2 id="这样只需要在apollo-配置-logging-level-随时可以做配置变更发布都能监听改变日志级别"><a href="#这样只需要在apollo-配置-logging-level-随时可以做配置变更发布都能监听改变日志级别" class="headerlink" title="这样只需要在apollo 配置 logging.level 随时可以做配置变更发布都能监听改变日志级别"></a>这样只需要在apollo 配置 logging.level 随时可以做配置变更发布都能监听改变日志级别</h2><h2 id="末尾分享一个特别好用的日志框架，与logback等无缝对接-框架名称：TLog"><a href="#末尾分享一个特别好用的日志框架，与logback等无缝对接-框架名称：TLog" class="headerlink" title="末尾分享一个特别好用的日志框架，与logback等无缝对接 框架名称：TLog"></a>末尾分享一个特别好用的日志框架，与logback等无缝对接 框架名称：TLog</h2><blockquote>
<p>TLog提供了一种最简单的方式来解决日志追踪问题，它不收集日志，也不需要另外的存储空间，它只是自动的对你的日志进行打标签，自动生成TraceId贯穿你微服务的一整条链路。并且提供上下游节点信息。适合中小型企业以及想快速解决日志追踪问题的公司项目使用。</p>
</blockquote>
]]></content>
      <categories>
        <category>后端技术</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>瓦克玻璃胶采购</title>
    <url>/2023/06/17/%E7%8E%BB%E7%92%83%E8%83%B6%E9%87%87%E8%B4%AD/</url>
    <content><![CDATA[<p>瓦克一瓶按标准的缝隙大小打10米左右 </p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">型号/价格</th>
<th style="text-align:center">名称</th>
<th style="text-align:center">产品特点</th>
<th style="text-align:center">使用范围</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">DA(87元/瓶)</td>
<td style="text-align:center">强效防霉醇型中性硅酮密封胶</td>
<td style="text-align:center">12倍0级防霉标准  德国EC1环保认证 法国A+认证</td>
<td style="text-align:center">厨卫淋浴房等场所防霉密封</td>
</tr>
<tr>
<td style="text-align:center">KB(59元/瓶)</td>
<td style="text-align:center">厨房卫浴专用长效防霉密封胶</td>
<td style="text-align:center">德国EC环保认证 0级长效防霉</td>
<td style="text-align:center">厨房卫浴防霉专用</td>
</tr>
<tr>
<td style="text-align:center">GM(30元/瓶)</td>
<td style="text-align:center">醇型中性硅酮密封胶</td>
<td style="text-align:center">通过SGS检测甲醛释放符合环保标准</td>
<td style="text-align:center">用于家装装潢、踢脚线、门套、窗户、吊顶等密封</td>
</tr>
<tr>
<td style="text-align:center">SN(41元/瓶)</td>
<td style="text-align:center">醇型厨卫防霉硅酮密封胶</td>
<td style="text-align:center">0级长效防霉</td>
<td style="text-align:center">台盆，马桶，灶台等一般厨房卫生间等洁具防霉</td>
</tr>
<tr>
<td style="text-align:center">CA(72元/瓶)</td>
<td style="text-align:center">防霉醇型中性硅酮密封胶</td>
<td style="text-align:center"></td>
<td style="text-align:center">DA降级版</td>
</tr>
<tr>
<td style="text-align:center">GF(68元/瓶)</td>
<td style="text-align:center">晶彩美容胶</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">CS(36元/瓶)</td>
<td style="text-align:center">建筑中性硅酮密封胶（耐候胶）</td>
<td style="text-align:center"></td>
<td style="text-align:center">室外门窗装配耐候密封</td>
</tr>
<tr>
<td style="text-align:center">HA(69元/瓶)</td>
<td style="text-align:center">高强度胶粘剂</td>
<td style="text-align:center"></td>
<td style="text-align:center">五金、木材、金属、玻璃等的粘接</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>购物</category>
      </categories>
      <tags>
        <tag>装修</tag>
      </tags>
  </entry>
  <entry>
    <title>生活录【2022-11】</title>
    <url>/2022/11/30/%E7%94%9F%E6%B4%BB%E5%BD%95%E3%80%902022-11%E3%80%91/</url>
    <content><![CDATA[<ul>
<li>[2022-11-30]<blockquote>
<p>今日老家下毛毛雪，上海雨夹雪，今年来第一次穿上羽绒服。</p>
</blockquote>
</li>
<li>[2022-11-29]<blockquote>
<p>新冠疫情已距今三年有余，何日方休~                                         </p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>小记</tag>
      </tags>
  </entry>
  <entry>
    <title>生活录【2022-12】</title>
    <url>/2022/12/01/%E7%94%9F%E6%B4%BB%E5%BD%95%E3%80%902022-12%E3%80%91/</url>
    <content><![CDATA[<ul>
<li>[2022-12-01]<blockquote>
<p>现住的地址【西郊家园】又出现新冠阳性病例，小区已划分为各大片区，所幸我所在片区未封闭。。。</p>
</blockquote>
</li>
<li>[2022-12-02]<blockquote>
<p>周五，工作闲余之时5元买了个翻墙软件，注册了个Google账号，弄半天才注册上，电脑和手机访问Google，YouTube速度都还挺行</p>
</blockquote>
</li>
<li>[2022-12-03]<blockquote>
<p>今天给儿子买了终身寿险,埋发的下了一颗种子,静待发芽！去钱大妈买火锅食材，周末火锅庆祝下哈哈</p>
</blockquote>
</li>
<li>[2022-12-04]<blockquote>
<p>中午打火锅，吃的很嗨皮~</p>
</blockquote>
</li>
<li>[2022-12-05]<blockquote>
<div>弄了下个人微博远程热部署，简化发博操作很奈斯 &#x1F60D</div></blockquote>
</li>
<li>[2022-12-06]<blockquote>
<div>随着大部分地区疫情解除封控后不用随便做核酸查核酸，赢得自由的同时反而危机四伏，于是网购了N95,连花清瘟胶囊预防预防 &#x1F637</div></blockquote>
</li>
<li>[2022-12-07]<blockquote>
<div>这周气温又回暖了些，今天14度明天都有16度了，感觉又回到了秋天 &#x1F602;</div></blockquote>
</li>
<li>[2022-12-08]<blockquote>
<p>今天加班到9点半把工作都搞完，想着周末好好找房子（找房原因：房东突然通知群租房整改，时间还很短）</p>
</blockquote>
</li>
<li>[2022-12-09]<blockquote>
<div>今天得知我后面坐着的同事新冠阳了，口罩戴起来，板蓝根喝起来！&#x1F60F;</div></blockquote>
</li>
<li>[2022-12-10]<blockquote>
<div>找呀找呀找房子，找到一个好房子，准备换窝咯 &#x1F60D;（前后找房子时间加起来2小时，是不是草率了 &#x1F602;）</div></blockquote>
</li>
<li>[2022-12-11]<blockquote>
<div>搬家搬费了，晚上喝奶茶续命。</div></blockquote>
</li>
<li>[2022-12-12]<blockquote>
<p>中午吃完饭趴蹲着晒晒太阳消消毒;晚上回来收拾了下家里的办公桌，搭建了个人文件服务器存储（https域名），放了些图片和音乐可以在线听</p>
</blockquote>
</li>
<li>[2022-12-13]<blockquote>
<div>买了车票又退了，回不去老家 &#x1F613;，但愿春节前疫情高峰过去</div></blockquote>
</li>
<li>[2022-12-14]<blockquote>
<p>哦豁,办公室羊了三只，,脑子全是看来离我不远了</p>
</blockquote>
</li>
<li>[2022-12-16]<blockquote>
<p>疫情蔓延真快，今天得知家里老爸羊了，火速和老婆决定买高铁票当天到家 上海-安庆-蕲春南</p>
</blockquote>
</li>
<li>[2022-12-17]<blockquote>
<p>老爸和儿子都发烧了，还好我们回来了带来已堆药，还能帮下忙</p>
</blockquote>
</li>
<li>[2022-12-18]<blockquote>
<p>儿子高烧两天多了，焦虑，还在他爷爷好转了</p>
</blockquote>
</li>
<li>[2022-12-19]<blockquote>
<p>儿子高烧终于退了，老天保佑</p>
</blockquote>
</li>
<li>[2022-12-26]<blockquote>
<p>停更了一周，也阳了，但没怎么发烧，症状都是轻症，还好还好，新冠看不上我的免疫系统，没使劲怼我</p>
</blockquote>
</li>
<li>[2022-12-27]<blockquote>
<p>今天启程去收房验房拿到了放钥匙，总的房子还行，但开发商也存在很多问题，比如停车费高，房屋存在空鼓，预留的地面高度不够贴瓷砖等等</p>
</blockquote>
</li>
<li>[2022-12-28]<blockquote>
<p>回上海工作的第一天，人特别没精神想睡觉，下班回家拿了一堆滞留的快递，发现有个华为智能插座快递不见了，裂开</p>
</blockquote>
</li>
<li>[2022-12-29]<blockquote>
<p>一早起来还以为到周五，结果还是周四，丧</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>小记</tag>
      </tags>
  </entry>
  <entry>
    <title>生活录【2023-01】</title>
    <url>/2023/01/01/%E7%94%9F%E6%B4%BB%E5%BD%95%E3%80%902023-01%E3%80%91/</url>
    <content><![CDATA[<ul>
<li>[2023-01-01]<blockquote>
<p>2023元旦，新年快乐，愿新一年里诸事顺利~</p>
</blockquote>
</li>
<li>[2023-01-03]<blockquote>
<p>开始了一年一度最激动最刺激的抢票环节，冲啊冲啊冲啊，尼玛秒没，携程外加抢票软件都没抢到，哭</p>
</blockquote>
</li>
<li>[2023-01-04]<blockquote>
<p>改回家行程，请五天假，14号一早6点虹桥高铁去武汉</p>
</blockquote>
</li>
<li>[2023-01-05]<blockquote>
<p>哇塞，公司发的新年礼物收到了，小兔子带带一个，里面还有很多小礼品</p>
</blockquote>
</li>
<li>[2023-01-06]<blockquote>
<p>万科也发的新年礼物了，还发了一箱车厘子，车厘子短暂自由了，笑哭</p>
</blockquote>
</li>
<li>[2023-01-09]<blockquote>
<p>经过周末两天的思考，觉得装修还是亲戚比较靠谱</p>
</blockquote>
</li>
<li>[2023-01-14]<blockquote>
<p>回家过春节咯，把育儿假提前请了回去陪儿子玩嘻嘻</p>
</blockquote>
</li>
<li>[2023-01-21]<blockquote>
<p>得知今年家里终于可以放烟花了，除夕夜早早吃完年夜饭开车去梅家塘大桥看了各种烟花。空中不间断传来烟花爆破声像是诉说着大家疫情三年来的不易终于要结束</p>
</blockquote>
</li>
<li>[2023-01-26]<blockquote>
<p>今日初六。凌晨4点半就出发，没想到路上还是堵成屎 都赶最后一天的高速</p>
</blockquote>
</li>
<li>[2023-01-28]<blockquote>
<p>从早上凌晨4点半出发到第二天凌晨接近三点到，历经22小时的返程，开车从日出看到日落。 一大早6点又从昆山赶回上海这边上班拿到一波开工利是~</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>小记</tag>
      </tags>
  </entry>
  <entry>
    <title>生活录【2023-02】</title>
    <url>/2023/02/04/%E7%94%9F%E6%B4%BB%E5%BD%95%E3%80%902023-02%E3%80%91/</url>
    <content><![CDATA[<ul>
<li>[2023-02-04]<blockquote>
<p>今日立春,出发去姐那请大家一起看电影（流浪地球2），看完了电影有感国产科幻片完全不虚国外，场面和剧情很宏观且站立的角度都很高</p>
</blockquote>
</li>
<li>[2023-02-05]<blockquote>
<p>元宵佳节，年的最后一天在姐家开吃元宵 吃完接着看流浪地球1，晚上打车回上海发现昆山司机都不去上海。。。最终还是有个‘糊涂’司机愿意先去了安亭哈哈，安亭再打个车回了小区</p>
</blockquote>
</li>
<li>[2023-02-10]<blockquote>
<p>山姆会员店新购子母箱一对，蛋糕，还有小青柠，和冰冻三莓（草莓，蓝莓，长得桑葚一样的黑莓）</p>
</blockquote>
</li>
<li>[2023-02-13]<blockquote>
<p>冰冻三莓吃了三天没吃完，今晚干掉它，吃啊~</p>
</blockquote>
</li>
<li>[2023-02-16]<blockquote>
<p>车子的解押来了，准备回武汉顺便预约办理下（3月6号）</p>
</blockquote>
</li>
<li>[2023-02-18]<blockquote>
<p>买了三月份回家的车票，回家看娃咯</p>
</blockquote>
</li>
<li>[2023-02-21]<blockquote>
<div>今日龙抬头之前预约了普外科牛教授的专家号，今天来看病，开了PECT全身检查单，交了7000大洋 &#x1F613;</div></blockquote>
</li>
<li>[2023-02-22]<blockquote>
<p>一大早5点多出发赶到医院做了检查,出了结果还是右颈部有病灶没有清理,还是得做手术清除以绝后患</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>小记</tag>
      </tags>
  </entry>
  <entry>
    <title>生活录【2023-02】</title>
    <url>/2023/03/03/%E7%94%9F%E6%B4%BB%E5%BD%95%E3%80%902023-03%E3%80%91%20/</url>
    <content><![CDATA[<ul>
<li>[2023-03-03]<blockquote>
<p>坐高铁回武汉看装修设计,办完回家看儿子</p>
</blockquote>
</li>
<li>[2023-03-06]<blockquote>
<p>今天又是忙碌的一天！上午一家人带儿子去武汉儿童医院，到了医院后开车又过江去了趟车管所办理车贷解押，办完中午去万象城吃了个饭后又给儿子带去涂了氟</p>
</blockquote>
</li>
<li>[2023-03-08]<blockquote>
<p>一早回了上海上班，老婆带着儿子检查单去医院看门诊，没啥问题，儿子健健康康</p>
</blockquote>
</li>
<li>[2023-03-09]</li>
</ul>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>小记</tag>
      </tags>
  </entry>
  <entry>
    <title>装修知识分享</title>
    <url>/2023/07/08/%E8%A3%85%E4%BF%AE%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB/</url>
    <content><![CDATA[<h2 id="gt-厨房要用4平方线，不然容易跳闸"><a href="#gt-厨房要用4平方线，不然容易跳闸" class="headerlink" title="&gt; 厨房要用4平方线，不然容易跳闸"></a>&gt; 厨房要用4平方线，不然容易跳闸</h2><div class="table-container">
<table>
<thead>
<tr>
<th>品类</th>
<th>范围</th>
<th>价格</th>
</tr>
</thead>
<tbody>
<tr>
<td>1.5MM平方电线</td>
<td>交通牌铜芯线(单线标准) 注:正常用做照明线路</td>
<td>1.20/M</td>
</tr>
<tr>
<td>2.5MM平方电线</td>
<td>长江牌铜芯线(单线标准) 注:正常用做插座线路包括挂壁空调(空调线路为专用线路单线单用),也可用做照明线路需和客户确认</td>
<td>1.40/M</td>
</tr>
<tr>
<td>4MM平方电线</td>
<td>交通牌铜芯线(单线标准) 注:正常用做柜式空调专用线路</td>
<td>1.60/M</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>空调，厨房，壁挂炉等留 16A插座;电视墙可以嵌入50管，但墙体是承重墙不可嵌入，水管需要包管</p>
<p>以下来自抖音博主分享<br><div class="gallery">
    <div class="fj-gallery  data" data-rowHeight="220" data-limit="10">
    <span class="gallery-data">[{"url":"https://files.guzlife.site/hexo/zhuangxiu/装修分享_4.jpg","alt":""},{"url":"https://files.guzlife.site/hexo/zhuangxiu/装修分享_8.jpg","alt":""},{"url":"https://files.guzlife.site/hexo/zhuangxiu/装修分享_10.jpg","alt":""},{"url":"https://files.guzlife.site/hexo/zhuangxiu/装修分享_13.jpg","alt":""},{"url":"https://files.guzlife.site/hexo/zhuangxiu/装修分享_16.jpg","alt":""},{"url":"https://files.guzlife.site/hexo/zhuangxiu/装修分享_19.jpg","alt":""},{"url":"https://files.guzlife.site/hexo/zhuangxiu/装修分享_22.jpg","alt":""},{"url":"https://files.guzlife.site/hexo/zhuangxiu/装修分享_25.jpg","alt":""},{"url":"https://files.guzlife.site/hexo/zhuangxiu/装修分享_28.jpg","alt":""},{"url":"https://files.guzlife.site/hexo/zhuangxiu/装修分享_32.jpg","alt":""}]</span>
    </div>
    <button class="gallery-load-more"><span>加载更多</span><i class="fa-solid fa-arrow-down"></i></button>
    </div></p>
</blockquote>
<p>​<br>​<br>​    </p>
]]></content>
      <categories>
        <category>装修知识分享</category>
      </categories>
      <tags>
        <tag>装修</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一个webflux的异常问题</title>
    <url>/2023/11/01/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AAwebflux%E7%9A%84%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>webflux 中发现一个正常接口中远程调用其他第三方接口，会出现系统阻塞假死。请看如下代码：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/messageList"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">GpResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">IWebSocketMessage</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">messageList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token annotation punctuation">@Validated</span> <span class="token class-name">MessageListReqVo</span> reqVo<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">//post 请求本地服务的另一个接口</span>
       <span class="token class-name">HttpUtil</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:8087/messageDetail"</span><span class="token punctuation">,</span> <span class="token string">"&#123;\"messageId\":12345&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">" === End ==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">GpResponse</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>用apifox 压测 例如：循环次数40次，线程数 5次  系统出现接口卡死无法返回的现象</p>
<h4 id="问题解决方案"><a href="#问题解决方案" class="headerlink" title="问题解决方案"></a>问题解决方案</h4><ol>
<li>方法返回值定义为mono 或者 flux</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/getOnlineClient"</span><span class="token punctuation">)</span>
   <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getOnlineClient</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token annotation punctuation">@Valid</span> <span class="token class-name">MessageListReqVo</span> reqVo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OnlineClientRespModel</span><span class="token punctuation">></span></span> ts <span class="token operator">=</span> iWebSocketMessageService<span class="token punctuation">.</span><span class="token function">getBaseMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IWebSocketMessage</span><span class="token punctuation">></span></span> flux <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">fromIterable</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span>
               <span class="token punctuation">.</span><span class="token function">delaySubscription</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
               <span class="token punctuation">.</span><span class="token function">delayElements</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       flux<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>f <span class="token operator">-></span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Here's some message:"</span> <span class="token operator">+</span> f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">" === End ==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">justOrEmpty</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">HttpUtil</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:8087/messageDetail"</span><span class="token punctuation">,</span> <span class="token string">"&#123;\"messageId\":12345&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token keyword">return</span> flux<span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span>
       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol>
<li><p>方法中调用第三方接口时采用异步方式处理 例如：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/messageList"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">GpResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">IWebSocketMessage</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">messageList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token annotation punctuation">@Validated</span> <span class="token class-name">MessageListReqVo</span> reqVo<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//QueryWrapper&lt;IWebSocketMessage> queryWrapper = new QueryWrapper&lt;>();</span>
        <span class="token comment">//queryWrapper.eq("message_platform", reqVo.getMessagePlatform());</span>
        <span class="token comment">//queryWrapper.and(qr -> qr.eq("message_mode", "1")).or(qr -> qr.like(reqVo.getMessageReceiver() != null, "receiver", reqVo.getMessageReceiver()).like(reqVo.getMessageTitle() != null, "message_title", reqVo.getMessageTitle()));</span>
       <span class="token comment">// queryWrapper.orderByDesc("created_time");</span>
<span class="token comment">//        PageHelper.startPage(1, 5);</span>
<span class="token comment">//        List&lt;IWebSocketMessageEntity> ts = //iWebSocketMessageService.getBaseMapper().selectList(queryWrapper);</span>
        <span class="token class-name">Future</span> future <span class="token operator">=</span>executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span>
                <span class="token class-name">HttpUtil</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:8087/messageDetail"</span><span class="token punctuation">,</span> <span class="token string">"&#123;\"messageId\":12345&#125;"</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">" === End ==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">GpResponse</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h4 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h4><p>待分析</p>
]]></content>
      <categories>
        <category>后端技术</category>
      </categories>
      <tags>
        <tag>webflux</tag>
      </tags>
  </entry>
  <entry>
    <title>butterfly-notes</title>
    <url>/2020/04/16/butterfly-notes/</url>
    <content><![CDATA[<h4 id="note"><a href="#note" class="headerlink" title="note"></a>note</h4><pre class="line-numbers language-none"><code class="language-none">&#123;% note warning [no-icon] modern %&#125;
Any content (support inline tags too.io).
&#123;% endnote %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<div class="note warning [no-icon] modern"><p>Any content (support inline tags too.io).</p>
</div>
<h4 id="tab"><a href="#tab" class="headerlink" title="tab"></a>tab</h4><pre class="line-numbers language-none"><code class="language-none">&#123;% tabs test1 %&#125;
&lt;!-- tab button1 --&gt;
This is my website, click the button &#123;% btn &#39;https:&#x2F;&#x2F;butterfly.js.org&#x2F;&#39;,Butterfly,far fa-hand-point-right %&#125;
&lt;!-- endtab --&gt;

&lt;!-- tab button2 --&gt;
&#123;% btn &#39;https:&#x2F;&#x2F;butterfly.js.org&#x2F;&#39;,Butterfly,far fa-hand-point-right,larger %&#125;
&#123;% btn &#39;https:&#x2F;&#x2F;butterfly.js.org&#x2F;&#39;,Butterfly,far fa-hand-point-right,blue larger %&#125;
&#123;% btn &#39;https:&#x2F;&#x2F;butterfly.js.org&#x2F;&#39;,Butterfly,far fa-hand-point-right,pink larger %&#125;
&#123;% btn &#39;https:&#x2F;&#x2F;butterfly.js.org&#x2F;&#39;,Butterfly,far fa-hand-point-right,red larger %&#125;
&#123;% btn &#39;https:&#x2F;&#x2F;butterfly.js.org&#x2F;&#39;,Butterfly,far fa-hand-point-right,purple larger %&#125;
&#123;% btn &#39;https:&#x2F;&#x2F;butterfly.js.org&#x2F;&#39;,Butterfly,far fa-hand-point-right,orange larger %&#125;
&#123;% btn &#39;https:&#x2F;&#x2F;butterfly.js.org&#x2F;&#39;,Butterfly,far fa-hand-point-right,green larger %&#125;
&lt;!-- endtab --&gt;

&lt;!-- tab button3  --&gt;
**This is button 3.**
&lt;!-- endtab --&gt;
&#123;% endtabs %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">button1</button></li><li class="tab"><button type="button" data-href="#test1-2">button2</button></li><li class="tab"><button type="button" data-href="#test1-3">button3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p>This is my website, click the button <a class="btn-beautify " href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><a class="btn-beautify larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br><a class="btn-beautify blue larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br><a class="btn-beautify pink larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br><a class="btn-beautify red larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br><a class="btn-beautify purple larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br><a class="btn-beautify orange larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br><a class="btn-beautify green larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is button 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>
<h4 id="button"><a href="#button" class="headerlink" title="button"></a>button</h4><p>This is my website, click the button <a class="btn-beautify " href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></p>
<a class="btn-beautify larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify blue larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify pink larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify red larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify purple larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify orange larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<a class="btn-beautify green larger" href="https://butterfly.js.org/" 
  title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a>
<h4 id="label"><a href="#label" class="headerlink" title="label"></a>label</h4><pre class="line-numbers language-none"><code class="language-none">臣亮言：&#123;% label 先帝 %&#125;創業未半，而&#123;% label 中道崩殂 blue %&#125;。今天下三分，&#123;% label 益州疲敝 pink %&#125;，此誠&#123;% label 危急存亡之秋 red %&#125;也！然侍衞之臣，不懈於內；&#123;% label 忠志之士 purple %&#125;，忘身於外者，蓋追先帝之殊遇，欲報之於陛下也。誠宜開張聖聽，以光先帝遺德，恢弘志士之氣；不宜妄自菲薄，引喻失義，以塞忠諫之路也。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>臣亮言：<mark class="hl-label default">先帝</mark> 創業未半，而<mark class="hl-label blue">中道崩殂</mark> 。今天下三分，<mark class="hl-label pink">益州疲敝</mark> ，此誠<mark class="hl-label red">危急存亡之秋</mark> 也！然侍衞之臣，不懈於內；<mark class="hl-label purple">忠志之士</mark> ，忘身於外者，蓋追先帝之殊遇，欲報之於陛下也。誠宜開張聖聽，以光先帝遺德，恢弘志士之氣；不宜妄自菲薄，引喻失義，以塞忠諫之路也。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>others</tag>
      </tags>
  </entry>
</search>
